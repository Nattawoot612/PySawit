{
    "docs": [
        {
            "location": "/index.html",
            "text": "PySawit v. 0.0.1\n\n\nOil Palm Growth and Yield Model\n\n\nby \nChristopher Teh Boon Sung\n\n\nOverview\n\n\nPySawit is a model, written in Python language, to simulate the growth and yield of oil palm. The following are various conditions among which PySawit is able to simulate:\n\n\n\n\ndifferent planting densities\n\n\ndifferent weather conditions (such as air temperature, rainfall, \netc.\n)\n\n\ndifferent soil properties (such as soil texture)\n\n\ndifferent crop physiological conditions (such as flower sex ratios, specific leaf area, plant nutrient content, photosynthetic parameters, \netc.\n)\n\n\n\n\nAt the moment, PySawit simulates crop production level 2, where oil palm is limited only by meteorological and soil water availability. Nutrients, pests, diseases, weeds, and other field practices are assumed to be optimally managed.\n\n\nInstallation\n\n\n\n\n\n\nTo simplify the installation process, download the \nAnaconda\n suite. \nMake sure you only choose the Python version 3.5 or higher (NOT ver 2.7).\n Downloading the \nAnaconda\n suite will include not only the Python interpreter but also the \nmatplotlib\n, \nnumpy\n, and \nxlwings\n modules which are required by PySawit.\n\n\n\n\n\n\nThen, at your system's command line or prompt, type: \npip install pysawit\n\nto download and install the PySawit.\n\n\n\n\n\n\nYou may also want to download and install \nGraphviz\n if you are planning to use PySawit's tracing feature to plot out a map of the program flow. Ensure you read the \nGraphviz\n website on how to set up the environment variable to recognize the location of graphviz files.\n\n\n\n\n\n\nHow to use\n\n\nCall Python on \npysawit.py\n. See this file's documentation on the commandline flags or options.\n\n\nCitation\n\n\nPreliminary work of PySawit was progressively published in several conference proceedings, but the full or complete work of PySawit was first published in:\n\n\nTEH, C.B.S., & CHEAH, S.S. (2017). Modelling crop growth and yield in palm oil cultivation. In Rival, A. (Ed.) Achieving sustainable cultivation of oil palm. Cambridge, UK: Burleigh Dodds Science Publishing (In Press).",
            "title": "Home"
        },
        {
            "location": "/index.html#pysawit-v-001",
            "text": "Oil Palm Growth and Yield Model  by  Christopher Teh Boon Sung",
            "title": "PySawit v. 0.0.1"
        },
        {
            "location": "/index.html#overview",
            "text": "PySawit is a model, written in Python language, to simulate the growth and yield of oil palm. The following are various conditions among which PySawit is able to simulate:   different planting densities  different weather conditions (such as air temperature, rainfall,  etc. )  different soil properties (such as soil texture)  different crop physiological conditions (such as flower sex ratios, specific leaf area, plant nutrient content, photosynthetic parameters,  etc. )   At the moment, PySawit simulates crop production level 2, where oil palm is limited only by meteorological and soil water availability. Nutrients, pests, diseases, weeds, and other field practices are assumed to be optimally managed.",
            "title": "Overview"
        },
        {
            "location": "/index.html#installation",
            "text": "To simplify the installation process, download the  Anaconda  suite.  Make sure you only choose the Python version 3.5 or higher (NOT ver 2.7).  Downloading the  Anaconda  suite will include not only the Python interpreter but also the  matplotlib ,  numpy , and  xlwings  modules which are required by PySawit.    Then, at your system's command line or prompt, type:  pip install pysawit \nto download and install the PySawit.    You may also want to download and install  Graphviz  if you are planning to use PySawit's tracing feature to plot out a map of the program flow. Ensure you read the  Graphviz  website on how to set up the environment variable to recognize the location of graphviz files.",
            "title": "Installation"
        },
        {
            "location": "/index.html#how-to-use",
            "text": "Call Python on  pysawit.py . See this file's documentation on the commandline flags or options.",
            "title": "How to use"
        },
        {
            "location": "/index.html#citation",
            "text": "Preliminary work of PySawit was progressively published in several conference proceedings, but the full or complete work of PySawit was first published in:  TEH, C.B.S., & CHEAH, S.S. (2017). Modelling crop growth and yield in palm oil cultivation. In Rival, A. (Ed.) Achieving sustainable cultivation of oil palm. Cambridge, UK: Burleigh Dodds Science Publishing (In Press).",
            "title": "Citation"
        },
        {
            "location": "/utils/index.html",
            "text": "utils \nmodule\n\n\n\nutils module.\n\n\nGeneral-purpose utilities.\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nAFGen \nclass\n\n\n\nTable lookup class.\n\n\nLinear inter- or extrapolation for a given set of tabulated (x,y) data. Stores (x,y) values\nand uses linear inter- or extrapolation, if needed, to return y based on a given x.\n\n\nSorts the data based on x values in an ascending order.\n\n\nMETHODS\n\n\n\n\nval\n: Given x, return its corresponding y for a list of (x,y) pairs\n\n\n\n\nConstructor\n __init__\n\n\n\nAFGen(self, xydict)\n\n\n\n\nCreate and initialize the AFGen object.\n\n\nArguments\n\n\n\n\nxydict (dict)\n: dictionary holding the (x,y) pairs of values\n\n\n\n\nval\n\n\n\nAFGen.val(self, x)\n\n\n\n\nGiven x, return y, using linear extra- or interpolation if needed.\n\n\nArguments\n\n\n\n\nx (int/float)\n: the x in (x,y) pair of values\n\n\n\n\nReturns\n\n\nint/float\n: y value\n\n\nFloat \nclass\n\n\n\nProxy class for floats (can also be used for integers).\n\n\nWraps a float number, so that whenever its value is used, a function is called first\nto returned a desired value This wrapper class allows some pre-computations (to be\ndone by the stored function) to be carried out first before returning the desired value.\n\n\nATTRIBUTES\n\n\n\n\nfn\n: Function to be called when the value of the float is used\n\n\nargs\n: Variable length arguments to be passed into \nfn\n, if any\n\n\nkwargs\n: Dictionary to be passed into \nfn\n, if any\n\n\n\n\nMETHODS\n\n\n\n\nreal\n: Calls the stored function\n\n\n__float__\n: Float conversion will call the stored functon\n\n\n\n\nEXAMPLE\n\n\ndef power(base, exponent):\n    return base ** exponent\n\ndef foo(val):\n    print(val.real)     # prints whatever value that has been passed into foo\n\nfoo(8)                  # prints an integer: 8\nfoo(8.0)                # prints a float: 8.0\nf = Float(power, 2, 3)  # will call power(2,3) when f is used\nfoo(f)                  # prints an integer: 8\nfoo(float(f))           # prints a float: 8.0\nf.args = [3,2]          # change the base to 3 and exponent to 2\nfoo(f)                  # prints an integer: 9\n\n\n\n\nConstructor\n __init__\n\n\n\nFloat(self, fn, *args, **kwargs)\n\n\n\n\nCreate and initialize the Float object.\n\n\nSetup the function to call and its required arguments, if any.\n\n\nArguments\n\n\n\n\nfn\n: function to call, with its paramaters, if any\n\n\nargs\n: positional parameters of \nfn\n function\n\n\nkwargs\n: dictionary parameters of \nfn\n function\n\n\n\n\n\n\nNote\n\n\nfn\n function must return the intended object/value\n\n\n\n\n__float__\n\n\n\nFloat.__float__(self)\n\n\n\n\nOverride \n__float__\n conversion method.\n\n\nThe saved function \nfn()\n is called when float() conversion is applied to this class.\n\n\nReturns\n\n\nfloat\n: return value of \nfn()\n\n\nreal\n\n\n\nOverride \nreal\n property.\n\n\nThe saved function \nfn()\n is called when the value of the float is used.\n\n\nReturns\n\n\nfloat\n: return value of \nfn()\n\n\nset_common_path \nfunction\n\n\n\nset_common_path(path='')\n\n\n\n\nReturn a wrapper function that prefix the same, common path to all file names.\n\n\nA shortcut to avoid typing or specifying the same path to all files. This method will\ncheck if specified path exists.\n\n\nArguments\n\n\n\n\npath (str)\n: the common path to all files\n\n\n\n\nRaises\n\n\n\n\nIOError\n: if invalid or non-existant file path or file name (see Example)\n\n\n\n\nExample\n\n\naddpath = set_common_path('C:\\\\Users\\\\adminuser')\nprint(addpath('ini.txt')        # this will print: C:\\Users\\adminuser\\ini.txt\nprint(addpath('ini.txt', True)  # set the second argument to True (default is False)\n                                #   to check if file 'ini.txt' exist, else raises\n                                #   IOError exception. If the second argument is set\n                                #   to False, no check for the file name is done.\n                                #   Set the second argument to False (or leave it\n                                #   unspecified) if the file is an output file, but\n                                #   for an input or initialization file that will\n                                #   read, this file must already exist, so set the\n                                #   second argument to True for all input files.\n\n\n\n\nWhether the second argument is \nTrue\n or \nFalse\n, this function will check if\nthe specified file path (excluding the file name) exist. If not, the exception\n\nIOError\n is raised.\n\n\nThis function will append the folder slash symbol if the path has no such\nslash as the end of the path, e.g., \n'C:\\\\Users\\\\adminuser'",
            "title": "Utils"
        },
        {
            "location": "/graph/index.html",
            "text": "graph \nmodule\n\n\n\nGraphing the program flow module.\n\n\nThis module aids in understanding the flow of program by creating a visual map (network graph or\nmap) of the program flow path. The graph map is in DOT and GML (XML) types.\n\n\n\n\nRequired installation\n\n\n\n\npycallgraph (run \npip install pycallgraph\n)\n\n\nGraphviz\n visualization software\n\n\n\n\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nGraph \nclass\n\n\n\nGraph class.\n\n\nCreates a network map by showing/tracing the program flow. DOT and GML (XML) files will be\ncreated to show the flow. Use a dedicated Graph Editor like \nyEd\n to view the network map.\n\n\nInherits the \npycallgraph.output.GraphvizOutput\n class to modify certain default\noutput/behavior. Override the following base methods\n\n\n    prepare_graph_attributes\n    node\n    edge\n    done\n    update\n\n\n\n\nMETHODS\n\n\n\n\ntrace\n: traces the program flow and creates (.dot) DOT and (.gml) GML files\n\n\n\n\nConstructor\n __init__\n\n\n\nGraph(self, **kwargs)\n\n\n\n\nCreate and initialize the Graph object.\n\n\nArguments\n\n\n\n\nkwargs (dict)\n: change any attributes or initialize new attributes with\n                   this dictionary\n\n\n\n\nprepare_graph_attributes\n\n\n\nGraph.prepare_graph_attributes(self)\n\n\n\n\nOverride to change the default attributes for graph, nodes, and edges.\n\n\nReturns\n\n\nNone\n:\n\n\nnode\n\n\n\nGraph.node(self, key, attr)\n\n\n\n\nOverride to delete newlines and number and length of function calls in node labels.\n\n\nReturns\n\n\nstr\n: node label\n\n\nedge\n\n\n\nGraph.edge(self, edge, attr)\n\n\n\n\nOverride to delete edge labels.\n\n\nReturns\n\n\nstr\n: edge label\n\n\ndone\n\n\n\nGraph.done(self)\n\n\n\n\nOverride to avoid creating the graph picture file.\n\n\nReturns\n\n\nNone\n:\n\n\nupdate\n\n\n\nGraph.update(self)\n\n\n\n\nOverride to avoid warning message to implement all abstract methods.\n\n\nDoes nothing.\n\n\nReturns\n\n\nNone\n:\n\n\ntrace\n\n\n\nGraph.trace(self, fn, fname, exclude_from_trace=None, strings_to_delete=None, class_colors=None)\n\n\n\n\nTrace the program flow and creates DOT (\n.dot) and GML (\n.gml) files.\n\n\nArguments\n\n\n\n\nfn (object)\n: function to call for the entry point to trace the program flow\n\n\nfname (str)\n: filename for graph files (do not supply file extension)\n\n\nexclude_from_trace (list)\n: names (\nstr\n) to exclude from trace (\nNone\n by default)\n\n\nstrings_to_delete (list)\n: text (\nstr\n) to remove from graph files (\nNone\n by default)\n\n\nclass_colors (dict)\n: node colors (\nNone\n by default)\n\n\n\n\nReturns\n\n\nNone\n:",
            "title": "Graph"
        },
        {
            "location": "/annualweather/index.html",
            "text": "annualweather \nmodule\n\n\n\nAnnualWeather module.\n\n\nHold one year of weather data in an ordered dictionary.\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nAnnualWeather \nclass\n\n\n\nHold one year weather data in an ordered dictionary (\ntable\n attribute).\n\n\nThis class is meant to be inherited, so that the update method can be implemented to\nfill in, either by simulation or reading in data from a file, the table with one year of\nweather data. The annual weather data is stored in the attribute table.\n\n\nWeather data consist of weather parameters/fields and data sets, where weather\nparameters are names such as 'rain' (for rainfall), 'tmin' (for min. air temperature), 'tmax'\n(for max. air temperature), 'wind' (for wind speed), and so on. The names of these weather\nparameters are provided by users.\n\n\nThese weather parameters make up one data set. If these data sets represent daily weather\ndata, then one year of weather data would have 365 data sets. But this is not necassarily\nalways the case. A data set may represent hourly weather data. If this is the case, the\nannual weather data would then have: 365 days/year x 24 hours/day = 8,760 data sets.\n\n\nBy overriding the \n__call__()\n method, objects of this class can be called like this:\n\n\n   obj('wind')\n\n\n\n\nto retrive the whole year of wind speed data, or\n\n\n    obj('wind')[30]\n\n\n\n\nwill retrieve the wind speed from the 30th data set. If each data set is daily weather data,\nthen this will retrieve the wind speed data for the 30th day.\n\n\nAnd by overriding the \n__str__()\n method, the entire annual weather data can be printed as a\nformatted output. For instance:\n\n\n    print(obj)\n\n\n\n\nprints the entire annual weather data, where every line of output contains each data set.\n\n\nATTRIBUTES\n\n\n\n\nnsets (int)\n: Number of data sets that make up a year\n\n\nfields (list)\n: List of weather parameters/fields for each data set\n\n\ntable (OrderedDict)\n: Hold the annual weather data\n\n\n\n\nMETHODS\n\n\n\n\nupdate\n: Fill in the table attribute with annual weather data. Needs to be implemented\n            by the descendant class.\n\n\n\n\nConstructor\n __init__\n\n\n\nAnnualWeather(self, nsets, *fields)\n\n\n\n\nCreate and initialize the AnnualWeather object.\n\n\nArguments\n\n\n\n\nnsets (int)\n: number of data sets that make up a year\n\n\nfields (str)\n: variable length of weather parameters in each data set\n\n\n\n\nupdate\n\n\n\nAnnualWeather.update(self)\n\n\n\n\nUpdate annual weather table.\n\n\n\n\nImplementation\n\n\nTo be implemented by the descendant class on how the attribute \ntable\n is\nto be filled with weather data.\n\n\n\n\nRaises\n\n\n\n\nNotImplementedError\n: raised if this method is used at this base class level",
            "title": "AnnualWeather"
        },
        {
            "location": "/weatherfile/index.html",
            "text": "weatherfile \nmodule\n\n\n\nWeatherFile module.\n\n\nRead and parse weather data from a text file.\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nWeatherFile \nclass\n\n\n\nWeather file class to read and parse weather data from a given weather file.\n\n\nGiven a weather file (comma-delimited and plain text file format), this class loads the file,\nreads, then parses the file content for the weather data. The weather data is then stored in a\ndictionary instance attribute named \ndata\n.\n\n\nThe weather file (in this case, we will name the file \"weather.txt\") must follow the\nfollowing format (in plain text file):\n\n\n    # lines starting with hash (#) are comments (comments are optional)\n    # sample weather data in \"weather.txt\"\n    *doy,sunhr,tmax,tmin,rh,wind,rain\n    1,5.95,31.4,22,87,1.04,0\n    2,5.1,32.7,21.9,96,1.02,0\n    ...\n    364,5.5,31.7,20.5,95,0.73,0.4\n    365,8.05,32,20.6,96,0.58,0\n\n\n\n\nwhere the data are separated by commas. The first two rows of the file begins with the \n#\n\ncharacter, which denotes these two lines are comments. You can have as many comment lines in\na weather file as you like, so long as you start the line for each comment with \n#\n. Comments\nare ignored by this class. Note: comments, if any, must only appear at the beginning of the\nfile. However, you cannot have comments within the weather data or at the end of the file.\n\n\nAfter the comment lines, you will list down the weather data, where the data are separated\ncommas. The third line in the \"weather.txt\" above contains the column headers, where \"doy\" is\nthe day of year, \"sunhr\" is the sunshine hours, \"tmax\" and \"tmin\" are the maximum and minimum\nair temperature, respectively, \"wind\" is the wind speed, and \"rain\" is the rainfall amount.\n\n\nColumn headers are mandatory because they indicate what kind of data are being stored.\nHeader names are user-defined and need not follow the example in \"weather.txt\". For example,\nyou can have column headers named \"year\", \"month\", and \"day\" to indicate the year,\nmonth, and day, respectively. You can even use \"rainfall\" as the header for rain, instead of\n\"rain\", as used in the \"weather.txt\" file example. Please note that header names are\ncase-sensitive, so column headers \"rain\", \"Rain\", and \"RAIN\" are not the same to one another.\n\n\nNote the symbol \n*\n in front of \"doy\" column header in \"weather.txt\". This symbol \n*\n\nindicates that \"doy\" is the key used to search for weather data. So, if we want to search for\nthe weather data when the day of year is 2 (doy==2), this class will return\n\"5.1,32.7,21.9,96,1.02,0\" (see the fifth row in \"weather.txt\" above).\n\n\nThis class will read the file from top to bottom, so once we reached the end of the weather\ndata, the class will 'rewind' so that data search begins again from the top. So, after\nsearching the weather data for doy==365, and if the data have been exhausted, the next call to\nsearch for the weather data for doy==1 will return \"5.95,31.4,22,87,1.04,0\" (see fourth row in\n\"weather.txt\" above).\n\n\nYou can have as many keys as you want, so long as you precede the column headers with \n*\n.\nIn this example, we have created three keys:\n\n\n    # \"weather2.txt\"\n    *year,*month,*day,doy,sunhr,tmax,tmin,rh,wind,rain\n    1990,1,1,1,5.95,31.4,22,87,1.04,0\n    1990,1,2,2,5.1,32.7,21.9,96,1.02,0\n    ...\n\n\n\n\nso that \"year\", \"month\", and \"day\" are keys that will be used to search for the weather data.\nKeys do not need to be consecutively arranged or even begin the header line. For instance,\n\n\n    # \"weather3.txt\"\n    sunhr,*doy,tmax,tmin,rh,wind,rain,*year\n    5.95,1,31.4,22,87,1.04,0,1990\n    5.1,2, 32.7,21.9,96,1.02,0,1990\n    ...\n\n\n\n\nwhere you now have two keys (\"doy\" and \"year'), and these keys are not arranged consecutively\nand do not start the header line.\n\n\nLastly, the weather data need not be for 1 year. You can place two or more years' worth of\nweather, such as:\n\n\n    # \"weather4.txt\"\n    *doy,sunhr,tmax,tmin,rh,wind,rain\n    1,5.95,31.4,22,87,1.04,0\n    2,5.1,32.7,21.9,96,1.02,0\n    ...\n    364,5.5,31.7,20.5,95,0.73,0.4\n    365,8.05,32,20.6,96,0.58,0\n    1,2.1,31.4,22.1,100,0.75,1.3\n    2,4.15,31.9,22.1,91,0.74,50.6\n    ...\n    1,5,31.1,19.9,91,0.64,3.6\n    2,3,31.5,20.2,96,0.71,32.7\n    ...\n\n\n\n\nAgain, as mentioned earlier, if the weather data set have been exhausted, the class will\n'rewind' the search back from the start. This is useful when you want to reuse the same\nweather data set repeatedly in simulation runs (e.g., running a 20-year simulation time\nwith only one year of weather data set).\n\n\nATTRIBUTES\n\n\n\n\nalldata (list)\n: List containing the weather data read from the weather file\n\n\n\n\nMETHODS\n\n\n\n\ntotal_years\n:  Number of years for the entire weather data\n\n\ntotal_datasets\n: Number of data sets for the entire weather data\n\n\nload\n: Read the whole weather data from a provided weather file and store in \nalldata\n\n\nupdate\n: Load one year of daily data and store them in weather table\n\n\n\n\nConstructor\n __init__\n\n\n\nWeatherFile(self, wthrfile, nsets=365)\n\n\n\n\nCreate and initialize the WeatherFile object.\n\n\nArguments\n\n\n\n\nwthrfile (str)\n: weather file name and path\n\n\nnsets (int)\n: no. of data sets in a year\n\n\n\n\ntotal_years\n\n\n\nWeatherFile.total_years(self)\n\n\n\n\nReturn the number of years for the entire weather data.\n\n\nReturns\n\n\nint\n: number of years\n\n\ntotal_datasets\n\n\n\nWeatherFile.total_datasets(self)\n\n\n\n\nReturn the number of data sets for the entire weather data.\n\n\nReturns\n\n\nint\n: number of data sets\n\n\nload\n\n\n\nWeatherFile.load(self, wthrfile)\n\n\n\n\nRead the entire contents in a given weather file into memory for fast access.\n\n\nComments in the weather file are ignored and not stored. The weather file must be in\nCSV and plain text format. However, the weather data can also be separated by semicolons.\n\n\nArguments\n\n\n\n\nwthrfile (str)\n: the weather file name and path\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nupdate\n\n\n\nWeatherFile.update(self, year=0)\n\n\n\n\nLoad one year of daily weather from the weather file.\n\n\nRefresh the weather table to a specified year.\n\n\nArguments\n\n\n\n\nyear (int)\n: weather data set for which year number (>= 1) to load into weather\n                 table. If \nyear\n <= 0, the next successive year's weather data set\n                 will be used.\n\n\n\n\nReturns\n\n\nNone\n:",
            "title": "WeatherFile"
        },
        {
            "location": "/simweather/index.html",
            "text": "simweather \nmodule\n\n\n\nSimWeather module.\n\n\nSimulates daily weather for min. and max. air temperature, wind speed, and rainfall.\n\n\n\n\nRequired installation\n\n\n\n\nAnaconda\n for \nscipy\n for statistics\n\n\n\n\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nParamRain \nnamedtuple\n\n\n\nParamRain(pww, pwd, shape, scale)\n\n\nnamedtuple: Rain generation parameters\n\npww\n\n\nfloat: probability of two consecutive wet days\n\npwd\n\n\nfloat: probability of a wet day, followed by a dry day\n\nshape\n\n\nfloat: shape factor of the gamma probability distribution\n\nscale\n\n\nfloat: scale factor of the gamma probability distribution\n\nParamTemp \nnamedtuple\n\n\nParamTemp(mean, amp, cv, ampcv, meanwet)\n\n\nnamedtuple: Air temperature generation parameters\n\nmean\n\n\nfloat: annual mean air temperature\n\namp\n\n\nfloat: amplitude (highest value - mean value) of air temperature\n\ncv\n\n\nfloat: coefficient of variation of air temperature\n\nampcv\n\n\nfloat: amplitude (smallest value - mean value) of cv\n\nmeanwet\n\n\nfloat: mean air temperature on days that rained\n\nParamWind \nnamedtuple\n\n\nParamWind(shape, scale)\n\n\nnamedtuple: Wind generation parameters\n\nshape\n\n\nfloat: shape factor of the Weibull probability distribution\n\nscale\n\n\nfloat: scale factor of the Weibull probability distribution\n\nSimWeather \nclass\n\n\nSimWeather class.\n\n\nSimulate daily weather for min. and max. air temperatures, wind speed, and rain.\n\n\nCLASS ATTRIBUTES\n\n\n\n\ncumulative_days (tuple)\n: cumulative number of days for every month\n\n\n\n\nMETHODS\n\n\n\n\nrnd\n: Random number generator [0-1)\n\n\ngenerate_rain\n: Daily rainfall amount (mm/day) based on a fitted inverse gamma CDF\n\n\ngenerate_temperature\n: Daily max. and min. air temperatures (deg. C)\n\n\ngenerate_wind\n: Mean daily wind speed (m/s) based on a fitted inverse Weibull distribution\n\n\nupdate\n: Generate (simulate) a new set of daily weather for one year\n\n\n\n\nConstructor\n __init__\n\n\n\nSimWeather(self, infile, jsonformat=False)\n\n\n\n\nCreate and initialize the SimWeather object.\n\n\nArguments\n\n\n\n\ninfile (str/json)\n: path and filename of initialization text file\n                       or a JSON-formatted string\n\n\njsonformat (bool)\n: \nFalse\n if \ninfile\n is a plain text file, or\n                       \nTrue\n if \ninfile\n is a string in JSON format\n\n\n\n\nrnd\n\n\n\nSimWeather.rnd()\n\n\n\n\n\n\nNote\n\n\nrnd\n is a static method.\n\n\n\n\nGenerate a uniform random number between the interval [0 - 1).\n\n\nReturns\n\n\nfloat\n: random value [0-1)\n\n\ngenerate_rain\n\n\n\nSimWeather.generate_rain(self)\n\n\n\n\nDetermine the daily rainfall amount (mm/day) based on a fitted inverse gamma CDF.\n\n\nReturns\n\n\nNone\n:\n\n\ngenerate_temperature\n\n\n\nSimWeather.generate_temperature(self)\n\n\n\n\nDetermine the daily max. and min. air temperatures (deg. C).\n\n\nReturns\n\n\nNone\n:\n\n\ngenerate_wind\n\n\n\nSimWeather.generate_wind(self)\n\n\n\n\nDetermine the mean daily wind speed (m/s) based on a fitted inverse Weibull distribution.\n\n\nReturns\n\n\nNone\n:\n\n\nupdate\n\n\n\nSimWeather.update(self)\n\n\n\n\nGenerate (simulate) one year of daily weather.\n\n\nReturns\n\n\nNone\n:",
            "title": "SimWeather"
        },
        {
            "location": "/meteo/index.html",
            "text": "meteo \nmodule\n\n\n\nMeteorological module.\n\n\nDaily and hourly (instantaneous) meteorology properties.\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nSolarRadComponents \nnamedtuple\n\n\n\nSolarRadComponents(total, direct, diffuse)\n\n\nnamedtuple: Solar radiation components\n\ntotal\n\n\nfloat: total solar radiation (direct + diffuse)\n\ndirect\n\n\nfloat: direct solar radiation\n\ndiffuse\n\n\nfloat: diffuse solar radiation\n\nSolarPos \nnamedtuple\n\n\nSolarPos(inc, hgt, azi)\n\n\nnamedtuple: Solar position\n\ninc\n\n\nfloat: solar inclination (angle from vertical)\n\nhgt\n\n\nfloat: solar elevation or height (angle from horizontal)\n\nazi\n\n\nfloat: solar azimuth (angle from North in a clockwise direction)\n\nMeteo \nclass\n\n\nMeteorology class.\n\n\nDaily and hourly (instantaneous) meteorology properties.\n\n\nDaily meteorological properties can either be read from a provided weather file, or have them\nsimulated. If the latter, users can provide a specific seed number for deterministic runs,\nwhich means model output always returns the exact same results, provided model input do not\nchange, or users can enter a zero or negative seed value, which means the model output would\nvary even though the model input remained the same.\n\n\n\n\nImportant\n\n\nIf the weather data are loaded from a file, ensure the weather file contains\ninformation on the minimum and maximum air temperature, wind speed, and rainfall.\n\n\n\n\nBased on daily values, hourly (instantaneous) meteorological properties are then simulated, as\nneeded.\n\n\n\n\nNote\n\n\nTime is indicated by local solar hour (not local time). This class only allows\nthe day of year (\ndoy\n) to move forward a day at a time, where each time the day\nmoves forward, the model is updated (see generator \nnext_day()\n).\n\n\n\n\nATTRIBUTES\n\n\n\n\nseed (int)\n: Random seed number\n\n\nlat (float)\n: Site latitude (deg.)\n    methgt (float)- Weather station height (m)\n\n\ndoy (int)\n: Day of year (Jan 1 = 1, Feb 1 = 32, ..., Dec 31 = 365)\n\n\nsolarhour (float)\n: Local solar hour (not local time!) (hours)\n\n\ndewtemp (float)\n: Dew temperature (deg. C)\n\n\nlag (float)\n: No. of hours after sunrise when air temperature\n                 and wind speed are minimum (hours)\n\n\nis_generated (bool)\n: \nTrue\n to generate daily weather or \nFalse\n to read in daily weather\n\n\nweatherfilename (str)\n: Name of weather file\n\n\nannwthr (AnnualWeather)\n: Annual daily weather data for current year\n\n\nnyears (int)\n: Year number (number of years elapsed)\n\n\ndecl (float)\n: Solar declination (radians)\n\n\nsunrise (float)\n: Local solar hour of sunrise (hour)\n\n\nsunset (float)\n: Local solar hour of sunset (hour)\n\n\ndaylen (float)\n: Length of day (hour)\n\n\nsolarconst (float)\n: Solar constant (W/m2)\n\n\ndayetrad (float)\n: Daily extra-terrestrial (ET) solar irradiance (MJ/m2)\n\n\ndayrad (SolarRadComponents)\n: Daily solar rad components (MJ/m2)\n\n\ndaytmin (float)\n: Min. daily air temperature (deg. C)\n\n\ndaytmax (float)\n: Max. daily air temperature (deg. C)\n\n\ndaytmean (float)\n: Mean daily air temperature (deg. C)\n\n\ndaywind (float)\n: Daily wind speed (m/s)\n\n\ndayrain (float)\n: Rainfall amount (mm/day)\n\n\nsolarpos (SolarPos)\n: Solar position (inclination and azimuth) (radians)\n\n\netrad (float)\n: Extra-terrestrial (ET) solar irradiance (W/m2)\n\n\nrad (SolarRadComponents)\n: Solar radiation components (W/m2)\n\n\nairtemp (float)\n: Air temperature (deg. C)\n\n\nslopesvp (float)\n: Slope of the saturated air vapor pressure curve (mbar/K)\n\n\nsvp (float)\n: Saturated air vapor pressure (mbar)\n\n\nvp (float)\n: Air vapor pressure (mbar)\n\n\nvpd (float)\n: Vapor pressure deficit (mbar)\n\n\nrh (float)\n: Air relative humidity (%)\n\n\nnetrad (float)\n: Net radiation (W/m2)\n\n\nwindspd (float)\n: Wind speed (m/s)\n\n\n\n\nMETHODS\n\n\n\n\ndoy365\n: Forces the day of year to stay within 1 and 365 inclusive\n\n\nrnd\n: Random number, needs to be seeded by the user or computer\n\n\nsvp_fn\n: Saturated air vapor pressure for a given air temperature (mbar)\n\n\nsolar_declination\n: Solar declination (radians)\n\n\nsunrise_set_hour\n: Local solar hour of sunrise and sunset (hours)\n\n\ndaylength\n: No. of hours between sunrise and sunset (hours)\n\n\nsolar_constant\n: Solar irradiance outside Earth (W/m2)\n\n\nday_et_radiation\n: Daily total extraterrestrial solar irradiance (MJ/m2/day)\n\n\nday_radiation\n: Daily direct, diffuse, and total solar irradiance (MJ/m2/day)\n\n\nsolar_position\n: Inclination, height, and azimuth of the Sun (radians)\n\n\net_radiation\n: Instantaneous extraterrestrial solar irradiance (W/m2)\n\n\nradiation\n: Instantaneous direct, diffuse, and total solar irradiance (W/m2)\n\n\nair_temperature\n: Instantaneous air temperature (deg. C)\n\n\nsvp\n: Saturated air vapor pressure (mbar)\n\n\nslope_svp\n: Slope of the saturated air vapor pressure (mbar/deg. C)\n\n\nvapor_pressure\n: Air vapor pressure (mbar)\n\n\nvapor_pressure_deficit\n: Vapor pressure deficit (mbar)\n\n\nrelative_humidity\n: Relative humidity (%)\n\n\nnet_radiation\n: Net radiation (W/m2)\n\n\nwind_speed\n: Wind speed (m/s)\n\n\nintegrate\n: N-point numerical Gaussian integration\n\n\nupdate_weather\n: Update daily weather when day of year and/or local solr hour have changed\n\n\n\n\nnext_day\n: Generator to increment DOY and then update the model properties\n\n\n\n\n\n\ndoy_has_changed\n: To be implemented in descendant classes that day of year has changed\n\n\n\n\nupdate\n: To be implemented in descendant classes for updating model properties based on\n             current model settings or values\n\n\n\n\nConstructor\n __init__\n\n\n\nMeteo(self, fname_in)\n\n\n\n\nCreate and initialize the Weather object.\n\n\nArguments\n\n\n\n\nfname_in (str)\n: path and filename of the model initialization file\n\n\n\n\nrnd\n\n\n\nMeteo.rnd()\n\n\n\n\n\n\nNote\n\n\nrnd\n is a static method.\n\n\n\n\nGenerate a uniform random number between the interval [0 - 1).\n\n\nReturns\n\n\nint\n: random value [0-1)\n\n\ndoy365\n\n\n\nMeteo.doy365(doy)\n\n\n\n\n\n\nNote\n\n\ndoy365\n is a static method.\n\n\n\n\nReturn a given day of year so that it stays within 1 and 365 inclusive.\n\n\nReturns\n\n\nint\n: day of year [1-365]\n\n\nsvp_fn\n\n\n\nMeteo.svp_fn(temp)\n\n\n\n\n\n\nNote\n\n\nsvp_fn\n is a static method.\n\n\n\n\nSaturated vapor pressure (mbar) at a given air temperature (deg. C).\n\n\nArguments\n\n\n\n\ntemp (float)\n: air temperature (deg. C)\n\n\n\n\nReturns\n\n\nfloat\n: saturated vapor pressure\n\n\nsolar_declination\n\n\n\nMeteo.solar_declination(self)\n\n\n\n\nSolar declination (radians).\n\n\nReturns\n\n\nfloat\n: solar declination\n\n\nsunrise_set_hour\n\n\n\nMeteo.sunrise_set_hour(self)\n\n\n\n\nHour of sunrise and sunset (hours).\n\n\nReturns\n\n\ntuple\n: local solar hour of sunrise and sunset (\nfloat\n)\n\n\ndaylength\n\n\n\nMeteo.daylength(self)\n\n\n\n\nLength of day, between sunrise and sunset (hours).\n\n\nReturns\n\n\nfloat\n: day length\n\n\nsolar_constant\n\n\n\nMeteo.solar_constant(self)\n\n\n\n\nSolar constant (W/m2), corrected for eccentricity.\n\n\nReturns\n\n\nfloat\n: solar constant\n\n\nday_et_radiation\n\n\n\nMeteo.day_et_radiation(self)\n\n\n\n\nExtra-terrestrial (outside Earth) solar irradiance (MJ/m2/day).\n\n\nReturns\n\n\nfloat\n: ET solar irradiance\n\n\nday_radiation\n\n\n\nDaily total solar irradiance and its direct and diffuse components (MJ/m2/day).\n\n\nReturns\n\n\nSolarRadComponents\n: \nnamedtuple\n containing the daily solar radiation components\n                        (\nfloat\n)\n\n\nsolar_position\n\n\n\nSolar position: inclination, height (solar elevation), and azimuth (radians).\n\n\nReturns\n\n\nSolarPos\n: \nnamedtuple\n containing position of the sun (\nfloat\n)\n\n\net_radiation\n\n\n\nMeteo.et_radiation(self)\n\n\n\n\nInstantaneous extra-terrestrial solar irradiance (W/m2).\n\n\nReturns\n\n\nfloat\n: ET solar radiation\n\n\nradiation\n\n\n\nInstantaneous total solar irradiance and its direct and diffuse components (W/m2).\n\n\nReturns\n\n\nSolarRadComponents\n: \nnamedtuple\n containing solar radiation components (\nfloat\n)\n\n\nair_temperature\n\n\n\nMeteo.air_temperature(self)\n\n\n\n\nInstantaneous air temperature (deg. C).\n\n\nReturns\n\n\nfloat\n: air temperature\n\n\nsaturated_vapor_presure\n\n\n\nMeteo.saturated_vapor_presure(self)\n\n\n\n\nSaturated air vapor pressure (mbar).\n\n\nReturns\n\n\nfloat\n: saturated air vapor pressure\n\n\nslope_svp\n\n\n\nMeteo.slope_svp(self)\n\n\n\n\nSlope of the saturated air vapor pressure (SVP) against air temperature (mbar/deg. C).\n\n\nReturns\n\n\nfloat\n: slope of the curve between SVP and air temperature\n\n\nvapor_pressure\n\n\n\nMeteo.vapor_pressure(self)\n\n\n\n\nInstantaneous air vapor pressure (mbar).\n\n\nReturns\n\n\nfloat\n: air vapor pressure\n\n\nvapor_pressure_deficit\n\n\n\nMeteo.vapor_pressure_deficit(self)\n\n\n\n\nAir vapor pressure deficit (mbar).\n\n\nThe difference between saturated air vapor pressure and current air vapor pressure.\n\n\nReturns\n\n\nfloat\n: air vapor pressure deficit\n\n\nrelative_humidity\n\n\n\nMeteo.relative_humidity(self)\n\n\n\n\nAir relative humidity (RH) (%).\n\n\nReturns\n\n\nfloat\n: RH\n\n\nnet_radiation\n\n\n\nMeteo.net_radiation(self)\n\n\n\n\nInstantaneous net solar irradiance (W/m2).\n\n\nReturns\n\n\nfloat\n: net solar radiation\n\n\nwind_speed\n\n\n\nMeteo.wind_speed(self)\n\n\n\n\nInstantaneous wind speed (m/s) based on a sine curve.\n\n\nReturns\n\n\nfloat\n: wind speed\n\n\nintegrate\n\n\n\nMeteo.integrate(self, n, lower, upper, func, *args)\n\n\n\n\nN-point numerical Gaussian integration.\n\n\nArguments\n\n\n\n\nn (int)\n: no. of points for integration (min. 1, max, 9; typically, 3 or 5)\n\n\nlower (float)\n: lower limit of integration\n\n\nupper (float)\n: upper limit of integration\n\n\nfunc\n: function to be integrated\n\n\nargs\n: variable length of function arguments to passed into \nfunc()\n\n\n\n\nReturns\n\n\ntuple\n: results of integration\n\n\nupdate_weather\n\n\n\nMeteo.update_weather(self, nextdoy=None, nexthour=None, reuse=False)\n\n\n\n\nUpdate the daily (and/or hourly) meteorological properties.\n\n\nArguments\n\n\n\n\nnextdoy (int)\n: the new day of year\n\n\nnexthour (int/float)\n: the new local solar hour\n\n\nreuse (bool)\n: \nFalse\n by default so that annual weather will be updated\n                  (i.e., regenerated) if the year end has been passed.\n                  Set to \nTrue\n so that the same annual weather is used\n                  regardless if the year end has been passed (i.e., always\n                  use the same annual weather data).\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nnext_day\n\n\n\nMeteo.next_day(self, duration)\n\n\n\n\nGenerator to increment DOY and then update the model properties.\n\n\nThis class only allows the day of year (DOY) to move forward a day at a time, where each\ntime the day moves forward, the model properties are updated.\n\n\nArguments\n\n\n\n\nduration (int)\n: number of daily cycles/steps to increment the DOY and model update\n\n\n\n\nYields\n\n\nint\n: current day run number\n\n\ndoy_has_changed\n\n\n\nMeteo.doy_has_changed(self)\n\n\n\n\nTo be implemented in descendant classes that the DOY has gone forward by a day.\n\n\n\n\nNote\n\n\nTo be implemented by descendant classes on how the model will be updated when\nthe DOY has changed.\n\n\n\n\nRaises\n\n\n\n\nNotImplementedError\n: raised if this method is used at this base class level\n\n\n\n\nupdate\n\n\n\nMeteo.update(self, external_info)\n\n\n\n\nTo be implemented in descendant classes for updating model properties.\n\n\n\n\nImplementation\n\n\nTo be implemented by descendant classes on how the model will be updated.\n\n\n\n\nArguments\n\n\n\n\nexternal_info (dict)\n: information determined from external sources\n\n\n\n\nRaises\n\n\n\n\nNotImplementedError\n: thrown if this method is used at this base class level",
            "title": "Meteo"
        },
        {
            "location": "/meteostats/index.html",
            "text": "meteostats \nmodule\n\n\n\nWeather statistics module.\n\n\nDescriptive statistics of annual and monthly weather data.\n\n\n\n\nRequired installation\n\n\n\n\nAnaconda\n for \nscipy\n for statistics\n\n\n\n\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nMeteoStats \nclass\n\n\n\nDescriptive statistics of annual and monthly weather data.\n\n\nCalculate several basic descriptive statistics on the weather parameters:\n\n\n    count\n    total\n    minimum\n    maximum\n    average\n    amplitude\n    standard deviation\n    cv (coeff. of variation)\n\n\n\n\nThe rain parameter has additional statistics:\n\n\n    no. of wet and dry days\n\n\n\n\nand the probability of having:\n\n\n    two consecutive dry days P(D|D),\n    two consecutive wet days P(W|W),\n    a dry day, then a wet day P(W|D),\n    a wet day, then a dry day P(D|W),\n    a dry day P(D)\n    a wet day P(W)\n\n\n\n\nThis class also fits a gamma probabilty distribution function to the rainfall data, and\nreturns the shape and scale of the rainfall distribution. Likewise, this class also fits\nthe Weibull probability distribution function to the windspeed data, and returns the\nWeibull shape and scale factors for the windspeed distribution.\n\n\nATTRIBUTES\n\n\n\n\nmetdata (list)\n: Annual weather data (list of \nOrderedDict\n objects)\n\n\nstatdict (list)\n: 3-D dictionary that hold the results of the statistical values\n                     (list of \nOrderedDict\n objects).\n\n\n\n\nExample\n\n\nstatdict[month][param][stat] = value\n\n\n\n\nthus,\n\n\nstatdict[2]['wind']['avg']\n\n\n\n\nreturns the average (\navg\n) wind speed (\nwind\n) for \nmonth\n = 2.\nUse the \ncollect()\n method to retrieve all statistical values for a given\ncondition. See the \ncollect()\n method docmentation on how to use it.\n\n\nMETHODS\n\n\n\n\nslice\n: Extract a given month's weather data\n\n\ncollect\n: Create a list that contain all statistical values for a given month,\n             parameter, or statistic\n\n\noutput_stats\n: Print the weather data and their descriptive statistics to file\n                  (can append data and descriptive statistics to file).\n\n\nannual_weather\n: Return the daily weather for the entire current year\n\n\n\n\nConstructor\n __init__\n\n\n\nMeteoStats(self, met)\n\n\n\n\nCreate and initialize the MeteoStats object.\n\n\nArguments\n\n\n\n\nmet (Meteo)\n: the Meteo object\n\n\n\n\nslice\n\n\n\nMeteoStats.slice(month)\n\n\n\n\nReturn the start and end positions in the weather data list for a given month.\n\n\nArguments\n\n\n\n\nmonth (int)\n: 0 to 11 for Jan to Dec, and 12 for whole year\n\n\n\n\nReturns\n\n\ntuple\n: start and end positions (\nint\n)\n\n\ncollect\n\n\n\nMeteoStats.collect(self, find_month=None, find_param=None, find_stat=None)\n\n\n\n\nCollect all values for a given/specified condition.\n\n\nArguments\n\n\n\n\nfind_month (int/None)\n: month number\n\n\nfind_param (str/None)\n: name of the weather parameter\n\n\nfind_stat (str/None)\n: name of the statistic\n\n\n\n\n\n\nNote\n\n\nThe \nmonth\n list is an zero-based index, so this means\n\nmonth\n=0 is Jan, \nmonth\n=1 is Feb.,..., \nmonth\n=11 is Dec, and\n\nmonth\n=12 is for the whole year.\n\n\n\n\nReturns\n\n\nlist\n: a list of values, depending on the following example\n\n\nExample\n\n\nSpecified                   Returns (as a list)\n------------------------------------------------------------------------------\nparameter and statistic     all monthly values\n  e.g.,\n  find_param = 'tmin'         returns every month's average (find_stat='avg')\n  find_stat = 'avg'           min. air temperature (find_param='tmin')\n\nmonth and parameter         all statistical values\n  e.g.,\n  find_month = 1              returns all the statistical values for max.\n  find_param = 'tmax'         air temperature (find_param='tmax') for Feb.\n                              (note: zero-based index, so, find_month=1 is Feb.).\n\n                              Statistics related to max. air temperature are:\n                              count, total, min., max., avg, amp, and cv (those\n                              returned by function _basic_stats), but for\n                              find_param='rain', the statistics related to rain\n                              are those returned by functions _basic_stats and\n                              _rain_stats (i.e., rain has more statistics than\n                              max. air temperature).\n\nmonth and stat              all parameter values\n  e.g.,\n  find_month = 3              returns the minimum (find_stat='min') values for\n  find_stat = 'min'           all of April's (find_month=3) parameters,\n                              such as: 'tmin', 'tmax', 'wind', and 'rain'.\n\n\n\n\nRaises\n\n\n\n\nValueError\n: raised when the no. of arguments passed into this function is not two\n\n\n\n\noutput_stats\n\n\n\nMeteoStats.output_stats(self, fname, append_to_file=False)\n\n\n\n\nWrite to file the annual weather data for all years and their statistics.\n\n\nAlso writes to file the raw statistics for every month and year. The name\n'-raw' is appended to the fileame of the output txt file.\n\n\nArguments\n\n\n\n\nfname (str)\n: path and name of output text file\n\n\nappend_to_file (bool)\n: \nFalse\n (default) to create a new output file, else\n                           \nTrue\n to append output to an exisiting file\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nannual_weather\n\n\n\nMeteoStats.annual_weather(self)\n\n\n\n\nReturn the entire daily weather data set for the current year.\n\n\nReturns\n\n\nOrderedDict\n: annual daily weather",
            "title": "MeteoStats"
        },
        {
            "location": "/crop/index.html",
            "text": "crop \nmodule\n\n\n\nCrop growth and yield module.\n\n\nModel oil palm growth and yield.\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nContents \nnamedtuple\n\n\n\nContents(n, m)\n\n\nnamedtuple: Nitrogen and minerals contents in a given plant part\n\nn\n\n\nfloat: N content\n\nm\n\n\nfloat: minerals content\n\nParts \nnamedtuple\n\n\nParts(pinnae, rachis, trunk, roots, maleflo, femaflo, bunches)\n\n\nnamedtuple: Plant parts of the oil palm tree\n\npinnae\n\n\n(Part): pinnae part\n\nrachis\n\n\n(Part): rachis part\n\ntrunk\n\n\n(Part): trunk part\n\nroots\n\n\n(Part): roots parts\n\nmaleflo\n\n\n(Part): male flowers part\n\nfemaflo\n\n\n(Part): female flowers parts\n\nbunches\n\n\n(Part): bunches part\n\nPart \nclass\n\n\nClass for individual plant parts (e.g., pinnae, rachis, trunk, etc.).\n\n\nATTRIBUTES\n\n\n\n\ncontent (Contents)\n: N and mineral content (each stored as an \nAFGen\n object)\n\n\nmaint (float)\n: Assimilates used for maintenance (kg CH2O/palm/day)\n\n\nfrac (float)\n: DM (dry matter) partitioning (fraction)\n\n\ngrowth (float)\n: Growth rate (kg DM/palm/day)\n\n\ndeath (float)\n: Death rate (kg DM/palm/day)\n\n\nweight (float)\n: Weight of the plant part (kg DM/palm)\n\n\n\n\nConstructor\n __init__\n\n\n\nPart(self)\n\n\n\n\nCreate and initialize the Part object.\n\n\nCrop \nclass\n\n\n\nCrop class (oil palm growth and yield).\n\n\nEXTERNAL INFORMATION REQUIRED (MUST BE SUPPLIED FROM AN EXTERNAL CLASS):\n\n\n    assimilates (float): Total amount of assimilates from photosynthesis\n                         (kg CH2O/palm/day)\n    cropstress (float): Plant water stress level\n                        (0 = max. stress to 1 = no stress)\n\n\n\n\nATTRIBUTES\n\n\n\n\ntreeage (int)\n: Age of the tree (days)\n\n\nplantdens (int)\n: Planting density (palms/ha)\n\n\nthinplantdens (int)\n: Thinning planting density (palms/ha)\n\n\nthinage (int)\n: Thinning tree age (days)\n\n\nfemaleprob (float)\n: Probability of obtaining female flowers (fraction)\n\n\nparts (Parts)\n: \nParts\n namedtuple of the various plant parts\n\n\nslatable (AFGen)\n: SLA table (age vs SLA)\n\n\ntrunkhgt (float)\n: Trunk height (m)\n\n\ntreehgt  (float)\n: Total tree height (m)\n\n\nvdmwgt (float)\n: VDM (vegetative dry matter) weight (kg DM/palm)\n\n\ntdmwgt (float)\n: Total DM weight (kg DM/palm)\n\n\nvdmmax (float)\n: Maximum VDM requirement for the given planting density (kg DM/palm/year)\n\n\nlaimax (float)\n: Maximum LAI (leaf area index) (m2 leaf/m2 ground)\n\n\nsla (float)\n: SLA (specific leaf area) (m2 leaf/kg leaf)\n\n\nlai (float)\n: LAI (leaf area index) (m2 leaf/m2 ground)\n\n\nvdmreq (float)\n: VDM demand for growth (kg DM/palm/day)\n\n\nassim4maint (float)\n: Total maintenance (kg CH2O/palm/day)\n\n\nassim4growth (float)\n: Assimilates for vegetative growth (kg CH2O/palm/day)\n\n\nassim4gen (float)\n: Assimilates for generative growth (kg CH2O/palm/day)\n\n\nboxmaleflo (list)\n: Boxcar for male flowers\n\n\nboxfemaflo (list)\n: Boxcar for female flowers (immature bunches)\n\n\nboxbunches (list)\n: Boxcar for mature bunches\n\n\nbunchyield (float)\n: Yield (kg DM/palm/year)\n\n\nflowersex (int)\n: Flower sex at the start of bunch/mature phase (0 = male/abort, 1 = female)\n\n\nnewflowersex (int)\n: Sex of new flower (0 = male/abort, 1 = female)\n\n\n\n\nMETHODS\n\n\n\n\ntree_height\n: Trunk and total tree height (canopy + trunk height) (m)\n\n\ndm_wgts\n: Weight of vegetative parts and all parts (kg DM/palm)\n\n\nvdm_maximum\n: Maximum VDM requirement for the given planting density (kg DM/palm/year)\n\n\nlai_maximum\n: Maximum LAI for the given planting density (m2 leaf/m2 ground)\n\n\nlookup_sla_lai\n: SLA-LAI lookup table\n\n\nmaintenance_respiration\n: Maintenance requirement for every plant part (kg CH2O/palm/day)\n\n\nvdm_requirement\n: Calculate the required VDM for growth (kg DM/palm/YEAR)\n\n\nveg_partitioning\n: DM partitioning for the various plant parts (fraction)\n\n\ncvf\n: Convert weight in glucose, CH2O, to that in dry matter, DM (kg DM/kg CH2O)\n\n\nveg_growth_rates\n: Growth rates for the various plant parts (kg DM/palm/day)\n\n\nveg_death_rates\n: Death rates for the various plant parts (kg DM/palm/day)\n\n\nupdate_veg_weights\n: Increment the various plant parts (kg DM/palm)\n\n\nnew_flower_sex\n: Determine the gender of the first (newest) flower in the \"boxcar\"\n\n\ngen_growth_rates\n: Growth rates for generative organs (kg DM/palm/day)\n\n\nupdate_gen_weights\n: Increment the weights for all generative organs (kg DM/palm)\n\n\ndaily_growth\n: Solve for the crop growth and yield\n\n\ndoy_has_changed\n: Day of year has changed, so update crop properties\n\n\nupdate\n: Calls the \ndaily_growth()\n method\n\n\n\n\nConstructor\n __init__\n\n\n\nCrop(self, fname_in)\n\n\n\n\nCreate and initialize the Crop object.\n\n\nArguments\n\n\n\n\nfname_in (str)\n: path and filename of the model initialization file\n\n\n\n\ntree_height\n\n\n\nCrop.tree_height(self, cropstress)\n\n\n\n\nTrunk and total tree height (canopy + trunk height) (m).\n\n\nArguments\n\n\n\n\ncropstress (float)\n: 0-1 plant water stress; 0 = max stress, 1 = no stress\n\n\n\n\nReturns\n\n\ntuple\n: trunk and total tree height (\nfloat\n)\n\n\ndm_wgts\n\n\n\nCrop.dm_wgts(self)\n\n\n\n\nWeight of vegetative parts and all parts (kg DM/palm).\n\n\nReturns\n\n\ntuple\n: VDM and TDM (\nfloat\n)\n\n\nvdm_maximum\n\n\n\nCrop.vdm_maximum(self)\n\n\n\n\nMaximum VDM requirement for the given planting density (kg DM/palm/year).\n\n\nReturns\n\n\nfloat\n: max VDM\n\n\nlai_maximum\n\n\n\nCrop.lai_maximum(self)\n\n\n\n\nMaximum LAI for the given planting density (m2 leaf/m2 ground).\n\n\nReturns\n\n\nfloat\n: maximum LAI\n\n\nlookup_sla_lai\n\n\n\nCrop.lookup_sla_lai(self)\n\n\n\n\nSLA-LAI lookup table.\n\n\nLookup from \nAFGen\n the current SLA (specific leaf area, m2 leaf/kg leaf)\nthen calculate the LAI (m2 leaf/m2 ground).\n\n\nReturns\n\n\ntuple\n: SLA and LAI (\nfloat\n)\n\n\nmaintenance_respiration\n\n\n\nCrop.maintenance_respiration(self, assimilates)\n\n\n\n\nMaintenance requirement for every plant part (kg CH2O/palm/day).\n\n\nArguments\n\n\n\n\nassimilates (float)\n: amount of assimilates from photosynthesis (kg CH2O/palm/day)\n\n\n\n\nReturns\n\n\ntuple\n: maintenance for every plant part (\nfloat\n)\n\n\nvdm_requirement\n\n\n\nCrop.vdm_requirement(self)\n\n\n\n\nCalculate the required VDM for growth (kg DM/palm/YEAR).\n\n\nVDM is per annual basis, so don't forget to divide by 365 to obtain\nthe required VDM per DAY.\n\n\nReturns\n\n\nfloat\n: VDM\n\n\nveg_partitioning\n\n\n\nCrop.veg_partitioning(self)\n\n\n\n\nDM partitioning for the various plant parts (fraction).\n\n\nReturns\n\n\ntuple\n: DM partitioning between all plant parts(float)\n\n\ncvf\n\n\n\nCrop.cvf(self)\n\n\n\n\nConvert weight in glucose, CH2O, to that in dry matter, DM (kg DM/kg CH2O).\n\n\nReturns\n\n\nfloat\n: conversion factor\n\n\nveg_growth_rates\n\n\n\nCrop.veg_growth_rates(self)\n\n\n\n\nGrowth rates for the various plant parts (kg DM/palm/day).\n\n\nReturns\n\n\ntuple\n: growth rates (float)\n\n\nveg_death_rates\n\n\n\nCrop.veg_death_rates(self)\n\n\n\n\nDeath rates for the various plant parts (kg DM/palm/day).\n\n\nReturns\n\n\ntuple\n: death rates (\nfloat\n)\n\n\nupdate_veg_weights\n\n\n\nCrop.update_veg_weights(self, assimilates)\n\n\n\n\nIncrement the various plant parts (kg DM/palm).\n\n\nArguments\n\n\n\n\nassimilates (float)\n: amount of assimilates from photosynthesis (kg CH2O/palm/day)\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nnew_flower_sex\n\n\n\nCrop.new_flower_sex(self)\n\n\n\n\nDetermine the gender of the first (newest) flower in the \"boxcar\".\n\n\nReturns\n\n\nint\n: sex of flower (0 = male/abortl 1 = female)\n\n\ngen_growth_rates\n\n\n\nCrop.gen_growth_rates(self)\n\n\n\n\nGrowth rates for generative organs (kg DM/palm/day).\n\n\nReturns\n\n\ntuple\n: generative growth rates (\nfloat\n)\n\n\nupdate_gen_weights\n\n\n\nCrop.update_gen_weights(self, cropstress)\n\n\n\n\nIncrement the weights for all generative organs (kg DM/palm).\n\n\nArguments\n\n\n\n\ncropstress (float)\n: 0-1 plant water stress; 0 = max stress, 1 = no stress\n\n\n\n\nReturns\n\n\nNone\n:\n\n\ndaily_growth\n\n\n\nCrop.daily_growth(self, assimilates, cropstress)\n\n\n\n\nSolve for the crop growth and yield.\n\n\nArguments\n\n\n\n\nassimilates (float)\n: amount of assimilates from photosynthesis (kg CH2O/palm/day)\n\n\ncropstress (float)\n: 0-1 plant water stress; 0 = max stress, 1 = no stress\n\n\n\n\nReturns\n\n\nNone\n:\n\n\ndoy_has_changed\n\n\n\nCrop.doy_has_changed(self)\n\n\n\n\nDOY has changed, so change the tree age.\n\n\nReturns\n\n\nNone\n:\n\n\nupdate\n\n\n\nCrop.update(self, external_info)\n\n\n\n\nUpdate the crop properties by calling the daily_growth method.\n\n\nArguments\n\n\n\n\nexternal_info (dict)\n: requires information on the assimilates and crop stress level\n\n\n\n\nReturns\n\n\nNone\n:",
            "title": "Crop"
        },
        {
            "location": "/soilwater/index.html",
            "text": "soilwater \nmodule\n\n\n\nSoil water movement and content module.\n\n\nModel one-dimensional soil water movement (fluxes).\nIncludes groundwater (assumes constant water table depth).\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nSWC \nnamedtuple\n\n\n\nSWC(sat, fc, pwp, psd, porosity, airentry)\n\n\nnamedtuple: Soil water characteristics\n\nsat\n\n\nfloat: saturation point\n\nfc\n\n\nfloat: field capacity\n\npwp\n\n\nfloat: permanent wilting point\n\npsd\n\n\nfloat: pore-size distribution\n\nporosity\n\n\nfloat: soil porosity\n\nairentry\n\n\nfloat: air-entry value\n\nTexture \nnamedtuple\n\n\nTexture(clay, sand, om)\n\n\nnamedtuple: Soil texture\n\nclay\n\n\nfloat: percentage of clay\n\nsand\n\n\nfloat: percentage of sand\n\nom\n\n\nfloat: percentage of organic matter\n\nAET \nnamedtuple\n\n\nAET(crop, soil)\n\n\nnamedtuple: Actual or reduction to evapotranspiration (ET)\n\ncrop\n\n\nfloat: actual crop transpiration (or reduction of crop potential transpiration)\n\nsoil\n\n\nfloat: actual soil evaporation (or reduction of soil potential evaporation)\n\nRootWater \nclass\n\n\nSoil water characteristics in the rooting zone.\n\n\nATTRIBUTES\n\n\n\n\nwc (float)\n: water content (mm)\n\n\nvwc (float)\n: water content (m3/m3)\n\n\ncritical (float)\n: critical water content, below which plant water stress occurs (m3/m3)\n\n\nsat (float)\n: saturation point (m3/m3)\n\n\nfc (float)\n: field capacity (m3/m3)\n\n\npwp (float)\n: permanent wilting point (m3/m3)\n\n\n\n\nConstructor\n __init__\n\n\n\nRootWater(self)\n\n\n\n\nCreate and initialize the RootWater object.\n\n\nSoilLayer \nclass\n\n\n\nSoil layer properties class.\n\n\nThe physical properties of a soil layer, dealing with soil water content and fluxes.\n\n\nCLASS ATTRIBUTES\n\n\n\n\nflux_fields (list)\n: list of flux names (str) to serve as dictionary keys which are\n                        \n['t', 'e', 'influx', 'outflux', 'netflux']\n\n\n\n\nATTRIBUTES\n\n\n\n\nthick (float)\n: Thickness of the soil layer (m)\n\n\ntexture\n: Sand, clay, and organic matter (%)\n\n\nvwc (float)\n: Vol. water content (m3/m3)\n\n\nwc (float)\n: Water content (mm)\n\n\naccthick (float)\n: Cumulative thickness (m)\n\n\ndepth (float)\n: Depth of layer from soil surface (m)\n\n\nswc (SWC)\n: Soil water characteristics (varying units)\n\n\nksat (float)\n: Saturated hydraulic conductivity (m/day)\n\n\nk (float)\n: Hydraulic conductivity (m/day)\n\n\nmatric (float)\n: Matric head (m)\n\n\ngravity (float)\n: Gravity head (m)\n\n\nfluxes (dict)\n: Water flux components stored in a dictionary\n\n\n\n\nThe keys for the dictionary \nfluxes\n are as follows\n\n\n    't': Plant water uptake via transpiration (m/day)\n    'e':  Loss of water via evaporation (m/day)\n    'influx': Water entry into layer (m/day)\n    'outflux': Water exit out of layer (m/day)\n    'netflux': Difference between influx and outflux (m/day)\n\n\n\n\nMETHODS\n\n\n\n\ninitialize_layer\n: Initialize all attributes\n\n\nupdate_heads_k\n: Update the matric head, gravity head, and\n                    the unsaturated hydraulic conductivity\n\n\ntothead\n: Total/sum of matric and gravity head (m) - \ngetter\n method\n\n\n\n\nNote\n\n\nVolumetric water content (vwc) can be given as a negative value. Negative\nvalues are a special code to mean that the water content is a fraction\nbetween SAT and FC or between FC and PWP. The codes are along a scale\nfrom -3 to -1:\n\n\n    Scale:\n              -2.75      -2.25              -1.5\n        [-3 ....|..........|....-2 ...........|..........-1]\n         PWP                    FC                      SAT\n\n\n\n\nso that if the given water content is -1, -2, or -3, it means the\nwater content should be set to saturation, field capacity, or\npermanent wilting point, respectively. A value of -1.5 means the\nwater content will be set at halfway between SAT and FC. Likewise,\n-2.25 and -2.75 mean the water content will be lower than FC, where\nthe former (-2.25) means the water content will be set nearer to FC,\nbut the latter (-2.75) closer to PWP.\n\n\nAny negative values outside the range of -3 to -1 means the water\ncontent wil be set at FC.\n\n\nConstructor\n __init__\n\n\n\nSoilLayer(self)\n\n\n\n\nCreate and initialize the SoilLayer object.\n\n\ninitialize_layer\n\n\n\nSoilLayer.initialize_layer(self, prevlayer, nextlayer)\n\n\n\n\nInitialize all soil layer attributes.\n\n\n\n\nNote\n\n\nThis function will set the water content to be within the range of\nSAT and FC or between FC and PWP, if the volumetric water content\nis given as negative value. See this class's docstring above.\n\n\n\n\nArguments\n\n\n\n\nprevlayer (\nSoilLayer\n)\n: previous soil layer (layer above current layer)\n\n\nnextlayer (\nSoilLayer\n)\n: next soil layer (layer beneath current layer)\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nupdate_heads_k\n\n\n\nSoilLayer.update_heads_k(self)\n\n\n\n\nUpdate matric and gravity heads (m), and unsaturated hydraulic conductivity (m/day).\n\n\nUpdate is based on current soil water content.\n\n\nReturns\n\n\nNone\n:\n\n\ntothead\n\n\n\nTotal head (m) - \ngetter\n method.\n\n\nReturns\n\n\nfloat\n: total head\n\n\nSoilWater \nclass\n\n\n\nSoil water balance class.\n\n\nModel the soil water flow in one dimension and water balance. Include the effect\nof groundwater, if any, but assume constant water table depth.\n\n\nEXTERNAL INFORMATION REQUIRED (MUST BE SUPPLIED FROM AN EXTERNAL CLASS)\n\n\n    petcrop (float): Potential transpiration (from crop) (mm/day)\n    petsoil (float): Potential evaporation (fro soil) (mm/day)\n\n\n\n\nATTRIBUTES\n\n\n\n\nnumintervals (int)\n: Number of intervals for integration within a day\n\n\nrootdepth (float)\n: Rooting depth (m)\n\n\nhas_watertable (bool)\n: True if water table / groundwater is present, else False\n\n\nnumlayers (int)\n: Number of soil layers\n\n\nlayers (list)\n: List of SoilLayer objects (their numbers must match numlayers)\n\n\nrootwater (RootWater)\n: Soil water characteristics in the root zone\n\n\ncf (list)\n: List of dictionary of cumulative fluxes for every soil layer\n\n\nwaterstresses (AET)\n: Reduction to evaporation and transpiration due to water stress\n\n\nnetrain (float)\n: Net rainfall (mm/day)\n\n\naet (AET)\n: Actual water loss by evaporation and transpiration (mm/day)\n\n\n\n\nMETHODS\n\n\n\n\nnet_rainfall\n: Net rainfall (mm/day)\n\n\nrooting_depth\n: Increase in rooting depth (m)\n\n\nupdate_rootwater\n: Update the water content and water characteristics in the rooting zone\n\n\nreduce_et\n: Reduction in evaporation and transpiration (0-1, 1=no stress, 0=max. stress)\n\n\nactual_et\n: Actual evaporation and transpiration (mm/day)\n\n\ninflux_from_watertable\n: Influx of water from the water table (m/day).\n\n\ncalc_water_fluxes\n: Calculate the various water fluxes (m/day) for all soil layers\n\n\ndaily_water_balance\n: Solve for the water content in each soil layer\n\n\nupdate\n: Update the soil water properties by solving the water fluxes\n\n\n\n\nConstructor\n __init__\n\n\n\nSoilWater(self, fname_in)\n\n\n\n\nCreate and initialize the SoilWater object.\n\n\nArguments\n\n\n\n\nfname_in (str)\n: path and filename of the model initialization file\n\n\n\n\nnet_rainfall\n\n\n\nSoilWater.net_rainfall(self)\n\n\n\n\nNet rainfall (mm/day).\n\n\nReturns\n\n\nfloat\n: net rainfall\n\n\nrooting_depth\n\n\n\nSoilWater.rooting_depth(self)\n\n\n\n\nIncrease in rooting depth (m).\n\n\nReturns\n\n\nfloat\n: rooting depth\n\n\nupdate_rootwater\n\n\n\nSoilWater.update_rootwater(self)\n\n\n\n\nUpdate the water content and water characteristics in the rooting zone.\n\n\nThe \nRootZone\n object will be set here.\n\n\n\n\nNote\n\n\nCritical soil water content for plant water stress taken as 0.6 or 60%\nof the difference between soil saturation and permanent wilting point.\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nreduce_et\n\n\n\nReduction in evaporation and transpiration (0-1, 1=no stress, 0=max. stress).\n\n\nReturns\n\n\nAET\n: \nnamedtuple\n containing reduction in E and T (\nfloat\n)\n\n\nactual_et\n\n\n\nActual evaporation and transpiration (mm/day).\n\n\nArguments\n\n\n\n\npetcrop (float)\n: potential water loss from the crop (mm/day)\n\n\npetsoil (float)\n: potential water loss from the soil (mm/day)\n\n\n\n\nReturns\n\n\nAET\n: \nnamedtuple\n containing actual water loss from soil and crop (\nfloat\n)\n\n\ninflux_from_watertable\n\n\n\nSoilWater.influx_from_watertable(self)\n\n\n\n\nInflux of water from the water table (m/day).\n\n\nReturns\n\n\nfloat\n: groundwater influx\n\n\ncalc_water_fluxes\n\n\n\nSoilWater.calc_water_fluxes(self, petcrop, petsoil, firstrun)\n\n\n\n\nCalculate the various water fluxes (m/day) for all soil layers.\n\n\nFlux can either have a positive or negative sign\n\n\n    +ve flux - means downward flow\n    -ve flux - means upward flow (against gravity)\n\n\n\n\nArguments\n\n\n\n\npetcrop (float)\n: potential water loss from the crop (mm/day)\n\n\npetsoil (float)\n: potential water loss from the soil (mm/day)\n\n\nfirstrun (bool)\n: set to \nTrue\n for first run, else \nFalse\n.\n                     \nTrue\n means the cumulative fluxes will be initialize with the first\n                     set of flux values. \nFalse\n will accumulate the flux values.\n\n\n\n\nReturns\n\n\nNone\n:\n\n\ndaily_water_balance\n\n\n\nSoilWater.daily_water_balance(self, petcrop, petsoil)\n\n\n\n\nSolve for the water content in each soil layer.\n\n\nArguments\n\n\n\n\npetcrop (float)\n: potential water loss from the crop (mm/day)\n\n\npetsoil (float)\n: potential water loss from the soil (mm/day)\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nupdate\n\n\n\nSoilWater.update(self, external_info)\n\n\n\n\nUpdate the soil water properties by solving the water fluxes.\n\n\nArguments\n\n\n\n\nexternal_info (dict)\n: requires information on potential transpiration and evaporation\n\n\n\n\nReturns\n\n\nNone\n:",
            "title": "SoilWater"
        },
        {
            "location": "/photosyn/index.html",
            "text": "photosyn \nmodule\n\n\n\nPhotosynthesis module.\n\n\nModel leaf and canopy photosynthesis by oil palm.\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nReflect \nnamedtuple\n\n\n\nReflect(pdr, pdf)\n\n\nnamedtuple: Reflection coefficients\n\npdr\n\n\nfloat: reflection coefficient for direct irradiance\n\npdf\n\n\nfloat: reflection coefficient for diffuse irradiance\n\nExtinction \nnamedtuple\n\n\nExtinction(kdr, kdf)\n\n\nnamedtuple: Canopy extinction coefficients\n\nkdr\n\n\nfloat: extinction coefficient for direct irradiance\n\nkdf\n\n\nfloat: extinction coefficient for diffuse irradiance\n\nPAR \nnamedtuple\n\n\nPAR(outdr, outdf, indrscatter, indr, inscatter, indf, abssunlit, absshaded)\n\n\nnamedtuple: Photosynthetically-active radiation (PAR) components\n\noutdr\n\n\nfloat: direct PAR component outside the canopies\n\noutdf\n\n\nfloat: diffuse PAR component outside the canopies\n\nindrscatter\n\n\nfloat: direct PAR and scatter components within the canopies\n\nindr\n\n\nfloat: direct PAR component within the canopies\n\ninscatter\n\n\nfloat: scatter component within the canopies\n\nindf\n\n\nfloat: diffuse PAR component within the canopies\n\nabssunlit\n\n\nfloat: amount of PAR absorbed by the sunlit leaves\n\nabsshaded\n\n\nfloat: amount of PAR absorbed by the shaded leaves\n\nLAI \nnamedtuple\n\n\nLAI(total, sunlit, shaded)\n\n\nnamedtuple: Leaf area index (LAI) components\n\ntotal\n\n\nfloat: total LAI (sunlit + shaded)\n\nsunlit\n\n\nfloat: amount of LAI exposed to direct solar irradiance\n\nshaded\n\n\nfloat: amount of LAI exposed to diffuse solar irradiance\n\nAssimCoef \nnamedtuple\n\n\nAssimCoef(mmco2, mmo2, specificity, vcmax, co2pt)\n\n\nnamedtuple: Photosynthesis coefficients\n\nmmco2\n\n\nfloat: Michaelis-Menten constant for CO2\n\nmmo2\n\n\nfloat: Michaelis-Menten constant for O2\n\nspecificity\n\n\nfloat: CO2 / O2 specificity factor\n\nvcmax\n\n\nfloat: Rubisco maximum capacity rate\n\nco2pt\n\n\nfloat: CO2 compensation point\n\nLeafAssim \nnamedtuple\n\n\nLeafAssim(vc, vqsl, vqsh, vs, sunlit, shaded)\n\n\nnamedtuple: Leaf assimilation components\n\nvc\n\n\nfloat: Rubisco-limited assimilation\n\nvqsl\n\n\nfloat: light-limited assimilation by the sunlit leaves\n\nvqsh\n\n\nfloat: light-limited assimilation by the shaded leaves\n\nvs\n\n\nfloat: sink-limited assimilation\n\nsunlit\n\n\nfloat: total assimilation by the sunlit leaves\n\nshaded\n\n\nfloat: total assimilation by the shaded leaves\n\nPhotosyn \nclass\n\n\nPhotosynthesis class.\n\n\nModel the leaf and canopy photosynthesis (CO2 assimilation) by oil palm.\n\n\nEXTERNAL INFORMATION REQUIRED (MUST BE SUPPLIED FROM AN EXTERNAL CLASS)\n\n\n    canopytemp (float): Canopy/foliage (deg. C)\n\n\n\n\nATTRIBUTES\n\n\n\n\nco2ambient (float)\n: Ambient CO2 concentration (umol CO2/mol air)\n\n\nco2change (float)\n: Annual change in ambient [CO2] (umol CO2/mol air/year)\n\n\nparscatter (float)\n: PAR scattering coefficient (unitless)\n\n\nparabsorb (float)\n: PAR absorption coefficient (unitless)\n\n\nparsoil (float)\n: PAR reflection off soil surface (unitless)\n\n\nquantum_yield (float)\n: Quantum efficiency/yield (umol CO2/umol photons)\n\n\nco2internal (float)\n: Intercellular CO2 concentration (umol CO2/mol air)\n\n\no2ambient (float)\n: Ambient O2 concentration (umol O2/mol air)\n\n\ngap (float)\n: Gap between canopies (unitless)\n\n\nextcoef (Extinction)\n: Canopy extinction coefficient (unitless)\n\n\nclump (float)\n: Canopy clump factor (unitless)\n\n\nrefcoef (Reflect)\n: PAR reflection coefficient (unitless)\n\n\nlaicomp (LAI)\n: Sunlit and shaded LAI components (m2 leaf/m2 ground)\n\n\npar (PAR)\n: PAR components (units vary)\n\n\nassimcoef (AssimCoef)\n: Assimilation coefficients (units vary)\n\n\nleafassim (LeafAssim)\n: CO2 assimilation by leaves (umol CO2/m2 leaf/s)\n\n\ncanopyassim (float)\n: CO2 assimilation by canopies (umol CO2/m2 leaf/s)\n\n\ndayassim (float)\n: Daily CO2 assimilation by canopies (kg CH2O/palm/day)\n\n\n\n\nMETHODS\n\n\n\n\nambientco2\n: Ambient CO2 concentration (umol CO2/mol air) for a given year\n\n\nupdate_co2ambient\n: Update ambient CO2 concentration\n\n\ncanopy_extinction\n: Canopy extinction coefficients (unitless) for\n                        direct and diffuse solar irradiance\n\n\ngap_fraction\n: Canopy gap fraction, viewed from zenith\n                  (0 = no gap/openings, 1 = full opening)\n\n\ncanopy_clump\n: Canopy clump (cluster) factor (0-1) (unitless)\n\n\nreflection_coef\n: Reflection coefficients (unitless) for direct and diffuse PAR\n\n\nlai_components\n: Sunlit and shaded LAI (need to first supply total LAI) (m2 leaf/m2 ground)\n\n\npar_components\n: PAR components (umol photons/m2 leaf/s)\n\n\nset_assim_coefs\n: Temperature-dependent CO2 assimilation parameters/coefficients.\n\n\nco2_internal\n: Internal CO2 concentration (in plant) (umol CO2/mol air)\n\n\nleaf_assimilation\n: CO2 assimilation per leaf basis (umol CO2/m2 leaf/s)\n\n\ndoy_has_changed\n: DOY has changed, so update the atmospheric [CO2]\n\n\ncanopy_assimilation\n: Instantaneous CO2 assimilation per canopy basis (umol CO2/m2 leaf/s)\n\n\ndaily_canopy_assimilation\n: Daily CO2 assimilation per canopy per day basis\n                               (kg CH2O/palm/day)\n\n\nupdate\n: Update the photosynthesis properties\n\n\n\n\nConstructor\n __init__\n\n\n\nPhotosyn(self, fname_in)\n\n\n\n\nCreate and initiliaze the Photosyn object.\n\n\nArguments\n\n\n\n\nfname_in (str)\n: path and filename of the model initialization file\n\n\n\n\nambientco2\n\n\n\nPhotosyn.ambientco2(year)\n\n\n\n\nCalculate the mean annual ambient [CO2] (umol CO2/mol air) for a given year.\n\n\n\n\nNote\n\n\nambientco2\n is a static method.\n\n\n\n\nArguments\n\n\n\n\nyear (int)\n: year\n\n\n\n\nReturns\n\n\nfloat\n: ambient CO2 concentration\n\n\nupdate_co2ambient\n\n\n\nPhotosyn.update_co2ambient(self)\n\n\n\n\nUpdate ambient CO2 concentration.\n\n\nReturns\n\n\nNone\n:\n\n\ncanopy_extinction\n\n\n\nCanopy extinction coefficients (unitless) for direct and diffuse solar irradiance.\n\n\nReturns\n\n\nExtinction\n: \nnamedtuple\n containing direct and diffuse extinction coefficients\n                (\nfloat\n)\n\n\ngap_fraction\n\n\n\nPhotosyn.gap_fraction(self)\n\n\n\n\nCanopy gap fraction, viewed from zenith (0 = no gap/openings, 1 = full opening).\n\n\nReturns\n\n\nfloat\n: gap fraction (0-1)\n\n\ncanopy_clump\n\n\n\nPhotosyn.canopy_clump(self)\n\n\n\n\nCanopy clump (cluster) factor (0-1) (unitless).\n\n\nReturns\n\n\nfloat\n: canopy clumpy/cluster coefficient/factor\n\n\nreflection_coef\n\n\n\nReflection coefficients (unitless) for direct and diffuse PAR.\n\n\nReturns\n\n\nReflect\n: \nnamedtuple\n containing direct and diffuse reflection coefficients (\nfloat\n)\n\n\nlai_components\n\n\n\nSunlit and shaded LAI (need to first supply total LAI) (m2 leaf/m2 ground).\n\n\nReturns\n\n\nLAI\n: \nnamedtuple\n containing total, sunlit, and shaded leaf area index (\nfloat\n)\n\n\npar_components\n\n\n\nPAR components (umol photons/m2 leaf/s).\n\n\nOutside, within canopies, and that absorbed by canopies.\n\n\nReturns\n\n\nPAR\n: \nnamedtuple\n containing the PAR components (\nfloat\n)\n\n\nset_assim_coefs\n\n\n\nTemperature-dependent CO2 assimilation parameters/coefficients.\n\n\nPhotosynthesis parameters determined in this method are as follows\n\n\n    Kc (umol/mol) - Michaelis-Menten constant for CO2\n    Ko (umol/mol) - Michaelis-Menten constant for O2\n    specificity (unitless) - CO2 / O2 specificity factor\n    Vcmax (umol CO2/m2 leaf/s) - Rubisco maximum capacity rate, and\n    CO2 pt (umol CO2/mol) - CO2 compensation point\n\n\n\n\nArguments\n\n\n\n\ncanopytemp (float)\n: foliage temperature (deg. C)\n\n\n\n\nReturns\n\n\nAssimCoef\n: \nnamedtuple\n contining photosynthesis parameters (\nfloat\n)\n\n\nco2_internal\n\n\n\nPhotosyn.co2_internal(self, canopytemp)\n\n\n\n\nInternal CO2 concentration (in plant) (umol CO2/mol air).\n\n\nArguments\n\n\n\n\ncanopytemp (float)\n: foliage temperature (deg. C)\n\n\n\n\nReturns\n\n\nfloat\n: intercellular CO2 concentration\n\n\nleaf_assimilation\n\n\n\nCO2 assimilation per leaf basis (umol CO2/m2 leaf/s).\n\n\nReturns\n\n\nLeafAssim\n: namedtuple containing CO2 assimilation rates (float)\n\n\ncanopy_assimilation\n\n\n\nPhotosyn.canopy_assimilation(self, canopytemp)\n\n\n\n\nSet the instantaneous CO2 assimilation per canopy basis (umol CO2/m2 leaf/s).\n\n\nArguments\n\n\n\n\ncanopytemp (float/Float)\n: foliage temperature (deg. C)\n\n\n\n\nReturns\n\n\nNone\n:\n\n\ndaily_canopy_assimilation\n\n\n\nPhotosyn.daily_canopy_assimilation(self, canopytemp)\n\n\n\n\nSet the daily CO2 assimilation per canopy per day basis (kg CH2O/palm/day).\n\n\nArguments\n\n\n\n\ncanopytemp (float/Float)\n: foliage temperature (deg. C)\n\n\n\n\nReturns\n\n\nNone\n:\n\n\ndoy_has_changed\n\n\n\nPhotosyn.doy_has_changed(self)\n\n\n\n\nDOY has changed, so update the atmospheric [CO2].\n\n\nReturns\n\n\nNone\n\n\n\nupdate\n\n\n\nPhotosyn.update(self, external_info)\n\n\n\n\nUpdate the photosynthesis properties.\n\n\nArguments\n\n\n\n\nexternal_info (dict)\n: requires information on canopy/foliage temperature (deg. C)\n\n\n\n\nReturns\n\n\nNone\n:",
            "title": "Photosyn"
        },
        {
            "location": "/energybal/index.html",
            "text": "energybal \nmodule\n\n\n\nEnergy balance module.\n\n\nModel the energy fluxes in the soil-plant-atmosphere system.\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nLeafDim \nnamedtuple\n\n\n\nLeafDim(length, width)\n\n\nnamedtuple: Leaflet dimension\n\nlength\n\n\nfloat: mean length of a single leaflet\n\nwidth\n\n\nfloat: mean width of a single leaflet\n\nStomatalStresses \nnamedtuple\n\n\nStomatalStresses(water, vpd, par)\n\n\nnamedtuple: Stresses that would reduce stomatal conductivity\n\nwater\n\n\nfloat: reduction due to water stress\n\nvpd\n\n\nfloat: reduction due to vapor pressure deficit\n\npar\n\n\nfloat: reduction due to insufficient solar irradiance\n\nAvailEnergy \nnamedtuple\n\n\nAvailEnergy(total, crop, soil, net, g)\n\n\nnamedtuple: Available radiation to the soil-plant-atmosphere system\n\ntotal\n\n\nfloat: radiation available to both crop and soil (total)\n\ncrop\n\n\nfloat: radiation available to the crop\n\nsoil\n\n\nfloat: radiation available to the soil\n\nnet\n\n\nfloat: net radiation\n\ng\n\n\nfloat: soil heat flux\n\nResistances \nnamedtuple\n\n\nResistances(rsa, raa, rca, rst, rcs, rss)\n\n\nnamedtuple: Resistances to heat fluxes\n\nrsa\n\n\nfloat: aerodynamic resistance between soil and mcf (mean canopy flow)\n\nraa\n\n\nfloat: aerodynamic resistance between mcf and the reference level\n\nrca\n\n\nfloat: boundary layer resistance\n\nrst\n\n\nfloat: leaf stomatal resistance\n\nrcs\n\n\nfloat: canopy resistance\n\nrss\n\n\nfloat: soil resistance\n\nHeatFluxes \nnamedtuple\n\n\nHeatFluxes(total, crop, soil)\n\n\nnamedtuple: Heat flux components\n\ntotal\n\n\nfloat total heat flux (crop + soil)\n\ncrop\n\n\nfloat heat flux from the crop\n\nsoil\n\n\nfloat heat flux from the soil\n\nEnergyBal \nclass\n\n\nEnergy balance class.\n\n\nModel the energy fluxes in the soil-plant-atmosphere system, using the electrical network\nanalogy, where the system is described as a network of resistances where various heat fluxes\nmust traverse a series of resistances to a reach a given reference height.\n\n\nThis class determines the canopy/foliage temperature which is used by the Photosynthesis model\ncomponent to determine the canopy photosynthesis.\n\n\nCLASS ATTRIBUTES\n\n\n\n\npsycho (float)\n: psychometric constant (0.658 mbar/K)\n\n\npcp (float)\n: vol. heat capacity (1221.09 J/m3/K)\n\n\nsoilroughlen (float)\n: soil roughness length for flat, tilled land (0.004 m)\n\n\nvonk (float)\n: von Karman constant (0.4)\n\n\n\n\n\n\nNote\n\n\nAll the above class attributes are supposed to be treated as constants.\n\n\n\n\nATTRIBUTES\n\n\n\n\nrefhgt (float)\n: Reference height (m)\n\n\nd (float)\n: Zero plane displacement (m)\n\n\nz0 (float)\n: Crop roughness length (m)\n\n\nwindext (float)\n: Wind extinction coefficient (unitless)\n\n\neddyext (float)\n: Eddy diffusivity extinction coefficient (unitless)\n\n\nleafdim (LeafDim)\n: Leaflet dimension (m)\n\n\nstressfn (StomatalStresses)\n: Reduction in stomatal conductance due to stresses\n\n\navailegy (AvailEnergy)\n: Available energy (W/m2)\n\n\nustar (float)\n: Friction velocity (m/s)\n\n\nucrophgt (float)\n: Wind speed at crop height (m/s)\n\n\nres (Resistances)\n: Flux resistances (s/m)\n\n\net (HeatFluxes)\n: Latent heat flux components (W/m2)\n\n\nh (HeatFluxes)\n: Sensible heat flux components (W/m2)\n\n\ncanopytemp (float)\n: Canopy/foliage temperature (deg. C)\n\n\ndayet (HeatFluxes)\n: Daily latent heat flux components (mm water/day)\n\n\ndayh (HeatFluxes)\n: Daily sensible heat flux components (MJ/m2/day)\n\n\n\n\nMETHODS\n\n\n\n\nwindspeed_profile_params\n: Windspeed profile paramaters\n\n\nleaf_dimension\n: Mean length and width of leaflets (m)\n\n\nstomatal_cond_stresses\n: Reduction in stomatal conductance due to\n                            various stresses (unitless)\n\n\navailable_energy\n: Available energy (W/m2) to crop and soil (net radiation partitioning)\n\n\nres_rss\n: Soil resistance (s/m)\n\n\nfriction_velocity\n: Friction velocity (m/s)\n\n\nwindspd_at_crophgt\n: Wind speed at crop/tree height (m/s)\n\n\nwindspd_at_refhgt\n: Extrapolated wind speed from weather station\n                       height to reference height (m/s)\n\n\nres_rsa\n: Aerodynamic resistance between soil and mcf (mean canopy flow) (s/m)\n\n\nres_raa\n: Aerodynamic resistance between mcf and reference height (s/m)\n\n\neffective_lai\n: Effective LAI (m2 leaf/m2 ground)\n\n\nres_rca\n: Boundary layer resistance (s/m)\n\n\nres_rcs_st\n: Canopy and stomatal resistance (s/m)\n\n\nresistances\n: Flux resistances (s/m)\n\n\ncalc_all_fluxes\n: Calculate the various latent and sensible heat fluxes (W/m2)\n\n\ncanopy_temperature\n: Canopy/foliage temperature (deg C)\n\n\nset_heat_fluxes\n: Instantaneous heat fluxes (W/m2)\n\n\nset_daily_immutables\n: Set constants that do not change within a day\n\n\ndaily_heat_balance\n: Solve for daily fluxes for latent heat (mm water/day) and\n                        sensible heat (MJ/m2/day)\n\n\nupdate\n: Update the energy balance properties\n\n\nnext_hour\n: Generator to increment the hour and then update the model properties\n\n\n\n\nConstructor\n __init__\n\n\n\nEnergyBal(self, fname_in)\n\n\n\n\nCreate and initialize the EnergyBal object.\n\n\nArguments\n\n\n\n\nfname_in (str)\n: path and filename of the model initialization file\n\n\n\n\nwindspeed_profile_params\n\n\n\nEnergyBal.windspeed_profile_params(self)\n\n\n\n\nWindspeed profile paramaters.\n\n\nParamaters calculated are as follows\n\n\n    zero plane displacement, d (m)\n    crop roughness length, z0 (m)\n    vertical profile extinction coeffiicient (unitless) for:\n        wind speed\n        eddy diffusivity\n\n\n\n\nReturns\n\n\ntuple\n: windspeed profile parameters (float)\n\n\nleaf_dimension\n\n\n\nMean length and width of leaflets (m).\n\n\nReturns\n\n\nLeafDim\n: \nnamedtuple\n containing the leaf dimensions (\nfloat\n)\n\n\nstomatal_cond_stresses\n\n\n\nReduction in stomatal conductance due to various stresses (unitless).\n\n\nReturns\n\n\nStomatalStresses\n: \nnamedtuple\n containing the stresses\n\n\navailable_energy\n\n\n\nAvailable energy (W/m2) to crop and soil (net radiation partitioning).\n\n\nReturns\n\n\nAvailEnergy\n: \nnamedtuple\n containing the available energy\n                 to the system and its components\n\n\nres_rss\n\n\n\nEnergyBal.res_rss(self)\n\n\n\n\nSoil resistance (s/m).\n\n\nReturns\n\n\nfloat\n: soil resistance\n\n\nfriction_velocity\n\n\n\nEnergyBal.friction_velocity(self)\n\n\n\n\nFriction velocity (m/s).\n\n\nReturns\n\n\nfloat\n: friction velocity\n\n\nRaises\n\n\n\n\nArithmeticError\n: raised when tree is taller than reference height\n\n\n\n\nwindspd_at_crophgt\n\n\n\nEnergyBal.windspd_at_crophgt(self)\n\n\n\n\nWind speed at crop/tree height (m/s).\n\n\nReturns\n\n\nfloat\n: wind speed at the tree height\n\n\nwindspd_at_refhgt\n\n\n\nEnergyBal.windspd_at_refhgt(self)\n\n\n\n\nWind speed (m/s) at reference height.\n\n\nWind speed measured at weather station height may not be the same\nas the reference height (thus, wind speed will have to be extrapolated to the\nreference height).\n\n\nReturns\n\n\nfloat\n: wind speed at reference height\n\n\nres_rsa\n\n\n\nEnergyBal.res_rsa(self)\n\n\n\n\nAerodynamic resistance between soil and mcf (mean canopy flow) (s/m).\n\n\nReturns\n\n\nfloat\n: aerodynamic resistance between soil and mcf\n\n\nres_raa\n\n\n\nEnergyBal.res_raa(self)\n\n\n\n\nAerodynamic resistance between mcf (mean canopy flow) and reference height (s/m).\n\n\nReturns\n\n\nfloat\n: aerodynamic resistance between mcf and reference height\n\n\neffective_lai\n\n\n\nEnergyBal.effective_lai(self)\n\n\n\n\nEffective LAI (m2 leaf/m2 ground).\n\n\nReturns\n\n\nfloat\n: effective LAI\n\n\nres_rca\n\n\n\nEnergyBal.res_rca(self)\n\n\n\n\nBoundary layer resistance (s/m).\n\n\nReturns\n\n\nfloat\n: boundary layer resistance\n\n\nres_rcs_st\n\n\n\nEnergyBal.res_rcs_st(self)\n\n\n\n\nCanopy and stomatal resistance (s/m).\n\n\nReturns\n\n\nfloat\n: Canopy and stomatal resistance\n\n\nresistances\n\n\n\nFlux resistances (s/m).\n\n\nReturns\n\n\nResistances\n: \nnamedtuple\n containing all the resistances (\nfloat\n)\n\n\ncalc_all_fluxes\n\n\n\nCalculate the various latent and sensible heat fluxes (W/m2).\n\n\nReturns\n\n\nHeatFluxes\n: \nnamedtuple\n containing the components of latent and sensible heat fluxes\n                 (\nfloat\n)\n\n\ncanopy_temperature\n\n\n\nEnergyBal.canopy_temperature(self)\n\n\n\n\nCanopy/foliage temperature (deg. C).\n\n\nReturns\n\n\nfloat\n: canopy temperature\n\n\nset_heat_fluxes\n\n\n\nEnergyBal.set_heat_fluxes(self)\n\n\n\n\nInstantaneous heat fluxes (W/m2).\n\n\nSets the following attributes\n\n\n    stressfn - reduction to stomatal conductance\n    availegy - available energy to the crop and soil\n    ustar - friction velocity\n    ucrophgt - wind speed at tree height\n    res - all the heat flux resisitances\n    et & h - latent and sensible heatfluxes\n    canopytemp - foliage temperature\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nset_daily_immutables\n\n\n\nEnergyBal.set_daily_immutables(self)\n\n\n\n\nSet constants that do not change within a day.\n\n\nSets parameters that will not change within the same day. This speeds up hourly\ncalculations carried out for the same day.\n\n\nReturns\n\n\nNone\n:\n\n\ndaily_heat_balance\n\n\n\nEnergyBal.daily_heat_balance(self)\n\n\n\n\nSolve for daily fluxes for latent (mm water/day) and sensible (MJ/m2/day) heat.\n\n\nReturns\n\n\nNone\n:\n\n\nupdate\n\n\n\nEnergyBal.update(self, external_info)\n\n\n\n\nUpdate the energy balance properties.\n\n\nArguments\n\n\n\n\nexternal_info (dict)\n: will be used to pass information needed by parent classes\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nnext_hour\n\n\n\nEnergyBal.next_hour(self, duration)\n\n\n\n\nGenerator to increment the hour and then update the model properties.\n\n\nHour moves forward an hour day at a time within the same day, where for each hour shift,\nthe model properties are updated.\n\n\nArguments\n\n\n\n\nduration (int)\n: number of cycles/steps to increment the hour and model update\n\n\n\n\nYields\n\n\nint\n: current hour run",
            "title": "EnergyBal"
        },
        {
            "location": "/facade/index.html",
            "text": "facade \nmodule\n\n\n\nFacade module.\n\n\nFront-end of the model.\nCoordinate model simulations and handle the model output.\n\n\n\n\nRequired installation\n\n\n\n\nAnaconda\n for \nmatplotlib\n and \nnumpy\n for chart\n  plotting\n\n\nprogressbar2\n (run \npip install progresbar2\n) for showing model run progress\n\n\nxlwings\n (run \npip install xlwings\n) for running Excel macros\n\n\n\n\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nFacade \nclass\n\n\n\nFacade class.\n\n\nCoordinate model simulations, show the progress of a model run, format and write model\nsimulation results to a file, trace a program flow, model debugging, and export model results\ninto Excel for further data processing and plotting.\n\n\nATTRIBUTES\n\n\n\n\nfname_in (str)\n: file name and path for model input parameters\n\n\nfname_out (str)\n: file name and path for model simulation results\n\n\nfname_aux (str)\n: file name and path for auxiliary simulation results (for debugging)\n\n\nfout (io.TextIOWrapper)\n: file object for daily data results\n\n\nfaux (io.TextIOWrapper)\n: file object for auxiliary data results\n\n\nout (OrderedDict)\n: holds values for daily model simulation results\n\n\nauxlist (list)\n: auxiliary list of model parameters to additionally\n                    output along wih model output (for debugging)\n\n\nprogbar (ProgressBar)\n: progressbar object to display progress of model run\n\n\nbdailyrun (bool)\n: \nTrue\n for daily runs, else \nFalse\n for hourly runs\n\n\nmodel (EnergyBal)\n: the model (oil palm model)\n\n\n\n\nMETHODS\n\n\n\n\ncreate_network_graph\n: Create network graphs to track program flow\n\n\nprint_elapsed_time\n: Format and print the elapsed time\n\n\nrunxlmacro\n: Export model results to an Excel workbook\n\n\nclose_files\n: Close all files\n\n\ndump\n: Dump the values of all or selected model parameters to a file\n\n\ntrace\n: Trace a single daily model run to create the network graphs, showing\n           the complete program flow through the model components\n\n\nset_auxiliaries\n: Set the auxiliary model parameters to additionally output\n\n\noutput_auxiliary\n: Write auxiliary results to auxiliary file (for debugging)\n\n\noutput_dailyrun\n: Initialize or retrieve and store daily model output results\n\n\noutput_hourlyrun\n: Initialize or retrieve and store hourly model output results\n\n\noutput_headers\n: Output the column headers (titles) to file\n\n\noutput_results\n: Save the model simulation results, and write results to file and screen\n\n\nrun_simulation\n: Run daily or hourly model simulations\n\n\nplot_weather\n: Plot charts on weather properties\n\n\n\n\nConstructor\n __init__\n\n\n\nFacade(self, fname_in, fname_out)\n\n\n\n\nCreate and initialize the Facade object.\n\n\nArguments\n\n\n\n\nfname_in (str)\n: path and filename of the model initialization file\n\n\nfname_out (str)\n: path and filename of the model simulation reults file\n\n\n\n\n__del__\n\n\n\nFacade.__del__(self)\n\n\n\n\nClass destructor.\n\n\nOverride to call \nclose_files()\n to ensure all opened files, if any, are closed before\nthis object is destroyed.\n\n\nReturns\n\n\nNone\n:\n\n\nclose_files\n\n\n\nFacade.close_files(self)\n\n\n\n\nClose all files.\n\n\nReturns\n\n\nNone\n:\n\n\nset_auxiliaries\n\n\n\nFacade.set_auxiliaries(self, fname_aux, auxlist)\n\n\n\n\nSet the auxiliaries to output (used for debugging or checking calculation results).\n\n\nSet attributes \nfname_aux\n and \nauxlist\n to the given auxiliary file name\nand auxiliary model parameters to output, respectively.\n\n\nArguments\n\n\n\n\nfname_aux (str)\n: path and filename to store auxiliary results\n\n\nauxlist (list)\n: list of variables to output during a model run\n\n\n\n\nExample\n\n\nFor example, we want to save the trunk maintenance and water influx into the 2nd soil\nlayer at the end of every run cycle. To access these parameters, we would normally\ncall them like the this:\n\n\nself.model.parts.trunk.maint   # maintenance of the trunk\nself.model.layers[1].fluxes['influx'] # influx of water into second soil layer\n\n\n\n\nbut for brevity, just use:\n\n\nparts.trunk.maint\nlayers[1].fluxes['influx']\n\n\n\n\nwhere 'self.model.' will be prefixed in this class for each item in the \nauxlist\n.\nSo, our sample code could look like this:\n\n\n# a list of what we want to output (remember: remove 'self.model.'):\naux = ['parts.trunk.maint', \"layers[1].fluxes['influx']\"]\n\n# debug.txt is the file name to store the auxiliary results:\nfac.set_auxiliaries('debug.txt', aux)  # fac is a Facade object\n\n# the usual model output plus the auxiliary results\nfac.run_simulation(True, 365)\n\n\n\n\nReturns\n\n\nNone\n:\n\n\ndump\n\n\n\nFacade.dump(self, fname, include=('.', '*'), exclude=None)\n\n\n\n\nDump the values of all or selected model parameters.\n\n\nThe user can specify which model parameters to include and exclude in the dump.\n\n\n\n\nNote\n\n\nSoilLayer\n objects have links to other \nSoilLayer\n objects, so these\nlinks create an infinite recursion during program flow tracing,\nso \nSoilLayer.prevlayer\n and \nSoilLayer.nextlayer\n attributes must be excluded.\nThis method automatically appends these two parameters in the \nexclude\n argument.\n\n\n\n\nArguments\n\n\n\n\nfname (str)\n: path and name of file to store the model dump\n\n\ninclude (list)\n: list of model parameters to include in the dump\n                    (default is to include all)\n\n\nexclude (list)\n: list of model parameters to exclude in the dump\n                    (default is to exclude none -- but see Note above)\n\n\n\n\nExample\n\n\nA list of model parameters to include (uses regular expression)\n\n\nincl = [r'.*Meteo',\n        r'.*Crop']\n\n\n\n\nand a list of model parameters to exclude (uses regular expression)\n\n\nexcl = [r'_Meteo__g$',\n        r'_Crop__assim4gen',\n        r'.*wind',\n        r'.box*',\n        r'.*ini']\n\n\n\n\nIf \nincl\n argument is omitted, all will be included by default (unless excluded by\n\nexcl\n). If \nexcl\n argument is omitted, none will be excluded (unless \nincl\n specfies\nwhat to include). If \nincl\n contradicts \nexcl\n, \nexcl\n wins (i.e., a parameter will\nbe excluded even though \nincl\n specified that this parameter should be included).\n\n\nReturns\n\n\nNone\n:\n\n\ncreate_network_graph\n\n\n\nFacade.create_network_graph(fname, fn, *args)\n\n\n\n\n\n\nNote\n\n\ncreate_network_graph\n is a static method\n\n\n\n\nTrace the program flow to aid in understanding the structure of the whole model.\n\n\nTwo graph files will be created: a DOT (.dot) file and a GML (.gml) file type.\n\n\nArguments\n\n\n\n\nfname (str)\n: file name (without extension) for DOT and GML graph files to create\n\n\nfn\n: the function which serves as the entry point to trace the program flow\n\n\nargs\n: variable lengh arguments, if any, for the entry point function \nfn()\n\n\n\n\nReturns\n\n\nNone\n:\n\n\ntrace\n\n\n\nFacade.trace(self, fname)\n\n\n\n\nCreate a network map to trace the program flow.\n\n\nProgram flows begins from \nFacade.run_simulation()\n method. A single daily run, just\nto capture the one cycle of the program flow through the model components/classes/methods.\n\n\nArguments\n\n\n\n\nfname (str)\n: files for DOT and GML map (do not specify the file extension)\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nprint_elapsed_time\n\n\n\nFacade.print_elapsed_time(totsecs)\n\n\n\n\n\n\nNote\n\n\nprint_elapsed_time\n is a static method\n\n\n\n\nFormat and print the elapsed time from total secs to hrs, mins, and secs.\n\n\nArguments\n\n\n\n\ntotsecs (int)\n: total number of seconds elapsed\n\n\n\n\nReturns\n\n\nNone\n:\n\n\noutput_auxiliary\n\n\n\nFacade.output_auxiliary(self)\n\n\n\n\nWrite auxiliary results to the auxiliary file (for debugging).\n\n\nReturns\n\n\nNone\n:\n\n\noutput_dailyrun\n\n\n\nFacade.output_dailyrun(self, initialize=False)\n\n\n\n\nPrepare the list of daily model output, then retrieve and store their results.\n\n\nArguments\n\n\n\n\ninitialize (bool)\n: \nTrue\n to initialize the output dictionry, else\n                       \nFalse\n to retrieve and store model output results in dictionary\n\n\n\n\nReturns\n\n\nNone\n:\n\n\noutput_hourlyrun\n\n\n\nFacade.output_hourlyrun(self, initialize=False)\n\n\n\n\nPrepare the list of hourly model output, then retrieve and store their results.\n\n\nReturns\n\n\nNone\n:\n\n\noutput_headers\n\n\n\nFacade.output_headers(self)\n\n\n\n\nOutput the column headers (titles) to file.\n\n\nReturns\n\n\nNone\n:\n\n\noutput_results\n\n\n\nFacade.output_results(self)\n\n\n\n\nSave the model simulation results, and write results to file and screen.\n\n\nReturns\n\n\nNone\n:\n\n\nrun_simulation\n\n\n\nFacade.run_simulation(self, bdailyrun, duration=None, auxfile=None, auxlist=None)\n\n\n\n\nModel simulation runs.\n\n\nRun the model for a selected number of days or hours. Allow for auxiliary model paramters\nto be outputted and stored in a file. Auxiliaries are for debugging purposes to monitor\nthe values of certain model parameters.\n\n\nArguments\n\n\n\n\nbdailyrun (bool)\n: \nTrue\n for daily simulation runs, else \nFalse\n for hourly simulation\n                      runs\n\n\nduration (int)\n: no. of simulation days to run (default is 1 day)\n\n\nauxfile (str)\n: auxiliary file name and path to store the output of selected model\n                   parameters\n\n\nauxlist (list)\n: list of model parameters to additionally output\n\n\n\n\n\n\nNote\n\n\nFor hourly runs, the \nduration\n argument is always set for 24 simulation hours,\nregardless of the supplied argument value.\n\n\n\n\nExample\n\n\nExample of an auxiliary list:\n\n\naux = ['doy',\n       'sla',\n       'lookup_sla_lai()[1]',\n       'parts.trunk.maint',\n       'layers[1].fluxes[\"influx\"]']\n\n\n\n\nwill output the following model parameters\n\n\n    doy (day of year)\n    sla (specific leaf area),\n    lai (leaf area index),\n    trunk maintenance, and\n    water influx into the first soil layer\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nrunxlmacro\n\n\n\nFacade.runxlmacro(xl_fname, xl_macroname, *args)\n\n\n\n\n\n\nNote\n\n\nrunxlmacro\n is a static method\n\n\n\n\nRun Excel macro stored in an Excel workbook (needs \nxlwings\n to be installed).\nCan be used, for instance, to export model results into Excel for charting or\ndata analysis.\n\n\nArguments\n\n\n\n\nxl_fname (str)\n: name of Excel workbook to receive the model output (and has the macro)\n\n\nxl_macroname (str)\n: the name of the Excel macro in xl_fname\n\n\nargs\n: variable length arguments, if any, to pass into \nxl_macroname\n macro function\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nplot_weather\n\n\n\nFacade.plot_weather(self, fig_no, annwthr, fname)\n\n\n\n\nPlot charts showing the distribution and statistics of several weather properties.\n\n\nArguments\n\n\n\n\nfig_no (int)\n: figure number, used to create multiple windows\n\n\nannwthr (dict)\n: dictionary holding the annual daily weather data\n\n\nfname (str)\n: weather stats file name and path\n\n\n\n\nReturns\n\n\nNone\n:\n\n\noutput_weather_stats\n\n\n\nFacade.output_weather_stats(self, fname, append_to_file=False)\n\n\n\n\nWrite to file the daily weather parameters for the whole year and their statistics.\n\n\nDaily weather parameters to be written to an output file are min. and max. air\ntemperatures, wind speed, rain, and solar irradiance. Some basic statistics will\nbe computed and written together to the file as well.\n\n\nCharts will be drawn as visual output.\n\n\nArguments\n\n\n\n\nfname (str)\n: output file (plain text file)\n\n\nappend_to_file (bool)\n: \nFalse\n (default) to create a new output file, else\n                           \nTrue\n to append output to an exisiting file\n\n\n\n\nReturns\n\n\nNone\n:",
            "title": "Facade"
        },
        {
            "location": "/pysawit/index.html",
            "text": "pysawit \nmodule\n\n\n\nPySawit: Oil palm growth and yield model.\n\n\nThis program can run in three modes:\n\n\n    1. Run model simulations (daily and hourly run)\n    2. Output weather/meteorology statistics\n    3. Create visualization network graph files\n\n\n\n\nOPTION (1a) - DAILY MODEL RUN\n\n\nUsage (for daily model simulations):\n\n\n    pysawit.py run -i <input file>\n                   -o <output file>\n                   -n <duration>\n                   -e <Excel workbook name> (optional)\n                   -m <macro name and arguments> (optional)\n\n\n\n\nwhere flags:\n\n\n    run is to specify either a daily or hourly model run\n    -i is the path and filename to the model input (initialization) file\n    -o is the path and filename of the model output (results) file\n    -n is the number of simulation days\n    -e (optional) is the full path name of an Excel workbook\n    -m (optional) is the name of the VBA macro in the Excel workbook to run.\n       If the flag -e is specified, this flag -m must be specified too.\n       If the macro contains one or more arguments, they must be specified after\n       the macro name, where each argument is separated by a space.\n\n\n\n\nExample\n\n\nOn the commandline, you will type the following in only one line\n\n\n    pysawit.py run -i \"C:\\Users\\adminuser\\input.txt\"\n                   -o \"C:\\Users\\adminuser\\output.txt\"\n                   -n 3650\n                   -e \"C:\\Users\\adminuser\\export.xlsm\"\n                   -m ImportResults A1 3650\n\n\n\n\nwhere\n\n\n    1) \"input.txt\" is the model input file and \"output.txt\" is the model output\n       file. Both of these files are in the \"C:\\Users\\adminuser\\\" folder.\n    2) The model will run for 10 years (n = 10 x 365 = 3650 days).\n    3) Upon model completion, the model results will be exported to \"export.xlsm\"\n       Excel workbook.\n    4) \"ImportResults\" is the name of the macro in \"export.xlsm\" that will\n       triggered to run, such as to import the model results, and \"A1\" and \"3650\"\n       will be passed into the macro as its arguments.\n\n\n\n\n\n\nNote\n\n\nIf the flag \n-e\n is not specified, no export to Excel will be carried out, even if\nthe flag \n-m\n is specified.\n\n\n\n\n\n\nImportant\n\n\nExcel export function works only in the Windows operating system.\n\n\n\n\n\n\nNote\n\n\nFile paths must be enclosed with double quotes, particularly if the file paths contain spaces.\n\n\n\n\nOPTION (1b) - HOURLY MODEL RUN\n\n\nUsage (for hourly model simulations):\n\n\n    pysawit.py run -i <input file>\n                   -o <output file>\n                   -e <Excel workbook name> (optional)\n                   -m <macro name and arguments> (optional)\n\n\n\n\nwhere flags\n\n\n    run is to specify daily or hourly model run\n    -i is the path and filename to the model input (initialization) file\n    -o is the path and filename of the model output (results) file\n    -e (optional) is the full path name of an Excel workbook\n    -m (optional) is the name of the VBA macro in the Excel workbook to run.\n       If the flag -e is specified, this flag -m must be specified too.\n       If the macro contains one or more arguments, they must be specified after\n       the macro name, where each argument is separated by a space.\n\n\n\n\n\n\nNote\n\n\nRunning the hourly model simulation is exactly the same as running for the daily model\nsimulations, except without the duration flag \n-n\n. If the \n-n\n flag is specified,\ndaily model run will be assumed. Removing the \n-n\n flag runs the hourly model simulations.\n\n\n\n\n\n\nNote\n\n\nHourly model simuations is always at one hour time increment from hour 0 to 24.\n\n\n\n\n\n\nNote\n\n\nFile paths must be enclosed with double quotes, particularly if the file paths contain spaces.\n\n\n\n\nOPTION (2) - WEATHER STATISTICS\n\n\nUsage (for weather/meteorology statistics):\n\n\n    pysawit.py met -i <input file>\n                   -o <weather file>\n                   -a\n                   -e <Excel workbook name> (optional)\n                   -m <macro name and arguments> (optional)\n\n\n\n\nwhere flags\n\n\n    met is to specify weather/meteorology statistics\n    -i is the path and filename to the model input (initialization) file\n    -o is the path and filename of the weather file\n    -a (optional) means to append the weather stats to the existing weather\n       file. If the weather file does not exist, a new one will be created.\n       Omit the -a flag to create a new file or to overwrite the existing file.\n    -e (optional) is the full path name of an Excel workbook\n    -m (optional) is the name of the VBA macro in the Excel workbook to run.\n       If the flag -e is specified, this flag -m must be specified too.\n       If the macro contains one or more arguments, they must be specified\n       after the macro name, where each argument is separated by a space.\n\n\n\n\nExample\n\n\nOn the commandline, you will type the following in only one line\n\n\n    pysawit.py met -i \"C:\\Users\\adminuser\\input.txt\"\n                   -w \"C:\\Users\\adminuser\\wthr-stats.txt\"\n\n\n\n\nwhere\n\n\n    1) \"input.txt\" is the model input file\n    2) \"wthr-stats.txt\" is the weather file. This is the file in which the\n       weather statistics will be written.\n    3) Since the -a flag is not specified, the weather file will be created.\n       If the 'wthr-stats.txt' file already exists, it will be overwritten\n       without notice.\n\n\n\n\n\n\nNote\n\n\nBoth of the input and weather files are in the \n\"C:\\Users\\adminuser\\\"\n folder.\n\n\n\n\n\n\nNote\n\n\nFile paths must be enclosed with double quotes, particularly if the file paths contain spaces.\n\n\n\n\nOPTION (3) - NETWORK GRAPH\n\n\nUsage (for creating visualization graph files):\n\n\n    pysawit.py net -i <input file>\n                   -o <visualization graph file>\n                   -e <Excel workbook name> (optional)\n                   -m <macro name and arguments> (optional)\n\n\n\n\nwhere flags\n\n\n    net is to specify the creation of network graphs to depict program flow\n    -i is the path and filename to the model input (initialization) file\n    -o is the path and filename of the visualization graph files (DO NOT specify\n       the file extension)\n    -e (optional) is the full path name of an Excel workbook\n    -m (optional) is the name of the VBA macro in the Excel workbook to run.\n       If the flag -e is specified, this flag -m must be specified too.\n       If the macro contains one or more arguments, they must be specified after\n       the macro name, where each argument is separated by a space.\n\n\n\n\nExample\n\n\nOn the commandline, you will type the following in only one line\n\n\n    pysawit.py net -i \"C:\\Users\\adminuser\\input.txt\"\n                   -o \"C:\\Users\\adminuser\\network\"\n\n\n\n\nwhere\n\n\n    1) \"input.txt\" is the model input file\n    2) \"network\" is the network file name (without extension). Upon completion,\n       two network graph files will be created: a DOT (file extension .dot) and\n       a GML (file extension .gml) file. In this case, two files 'network.dot'\n       and 'network.gml' will be created.\n\n\n\n\n\n\nWarning\n\n\nDO NOT supply file extensions for network file name. If you do, \".dot\" and \".gml\" will\nbe appended to the provided file extension.\n\n\n\n\n\n\nNote\n\n\nBoth of the input and network files are in the \n\"C:\\Users\\adminuser\\\"\n folder.\n\n\n\n\n\n\nNote\n\n\nFile paths must be enclosed with double quotes, particularly if the file paths contain spaces.\n\n\n\n\nSUMMARY\n\n\nGeneral commandline options:\n\n\n    pysawit.py {run|met|net} [-h]\n\n\n\n\nrun\n mode:\n\n\n    pysawit.py run -i -o [-n] [-e -m[...]] [-h]\n\n\n\n\nmet\n mode:\n\n\n    pysawit.py met -i -o [-a] [-e -m[...]] [-h]\n\n\n\n\nnet\n mode:\n\n\n    pysawit.py net -i -o [-e -m[...]] [-h]\n\n\n\n\n\n\nFlags \n-i\n and \n-o\n are required for all modes.\n\n\nFlags \n-e\n and \n-m\n are optional but if specified, they must be specified together.\n\n\n\n\nAuthor - Christopher Teh Boon Sung\n\n\n\n\nprintmsg \nfunction\n\n\n\nprintmsg(msg, printtrace=False, wait=False)\n\n\n\n\nPrint a list of messages then, if needed, wait for keypress to resume (usually to exit).\n\n\nArguments\n\n\n\n\nmsg (list)\n: list of messages (\nstr\n) to print to screen\n\n\nprinttrace (bool)\n: \nTrue\n to print error messages to error log file,\n                       else \nFalse\n to suppress\n\n\nwait (bool)\n: \nTrue\n to wait for Enter key press before exiting, else\n                 \nFalse\n to exit immediately\n\n\n\n\nReturns\n\n\nNone\n:\n\n\nmain \nfunction\n\n\n\nmain()\n\n\n\n\nMain entry point for the program.\n\n\nReturns\n\n\nint\n: Error codes\n\n\n    0 = no error\n    1 = error during model operation (e.g., simulation run) (exception errors)\n    2 = error in commandline flags/options",
            "title": "PySawit"
        }
    ]
}